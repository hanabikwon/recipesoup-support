/// 토끼굴 시스템 이미지 에셋 관리
/// 모든 마일스톤 이미지 경로와 기본값 정의
class BurrowAssets {
  // Assets base path
  static const String _basePath = 'assets/images/burrow';
  
  /// 성장 트랙 마일스톤 이미지 경로
  static const Map<int, String> milestoneImages = {
    1: '$_basePath/milestones/burrow_tiny.png',
    2: '$_basePath/milestones/burrow_small.png', 
    3: '$_basePath/milestones/burrow_medium.png',
    4: '$_basePath/milestones/burrow_study.png',
    5: '$_basePath/milestones/burrow_large.png',
  };
  
  /// 특별 공간 이미지 경로
  static const Map<String, String> specialRoomImages = {
    'ballroom': '$_basePath/special_rooms/burrow_ballroom.png',
    'hotSpring': '$_basePath/special_rooms/burrow_hotspring.png',
    'orchestra': '$_basePath/special_rooms/burrow_concert.png',
    'alchemyLab': '$_basePath/special_rooms/burrow_lab.png',
    'fineDining': '$_basePath/special_rooms/burrow_fineding.png',
  };
  
  /// 기본 플레이스홀더 이미지
  static const String defaultMilestone = '$_basePath/milestones/burrow_tiny.png';
  static const String defaultSpecialRoom = '$_basePath/milestones/burrow_locked.png';
  
  /// 잠긴 상태 이미지
  static const String lockedMilestone = '$_basePath/milestones/burrow_locked.png';
  static const String lockedSpecialRoom = '$_basePath/milestones/burrow_locked.png';
  
  /// 레벨에 따른 마일스톤 이미지 경로 반환
  static String getMilestoneImagePath(int level) {
    return milestoneImages[level] ?? defaultMilestone;
  }
  
  /// 특별 공간 타입에 따른 이미지 경로 반환
  static String getSpecialRoomImagePath(String roomType) {
    return specialRoomImages[roomType] ?? defaultSpecialRoom;
  }
  
  /// 이미지 파일 존재 여부 확인 (개발용 디버깅)
  static List<String> getAllAssetPaths() {
    final List<String> allPaths = [];
    allPaths.addAll(milestoneImages.values);
    allPaths.addAll(specialRoomImages.values);
    allPaths.addAll([
      defaultMilestone,
      defaultSpecialRoom,
      lockedMilestone,
      lockedSpecialRoom,
    ]);
    return allPaths;
  }
  
  /// 이미지 에셋이 유효한지 확인
  static bool isValidAssetPath(String path) {
    return path.startsWith(_basePath) && 
           (path.endsWith('.png') || 
            path.endsWith('.jpg') || 
            path.endsWith('.jpeg'));
  }
  
  /// 개발 환경에서 누락된 에셋 체크를 위한 헬퍼
  static Map<String, bool> checkMissingAssets() {
    final Map<String, bool> assetStatus = {};
    
    for (final path in getAllAssetPaths()) {
      // 실제로는 rootBundle.load()를 사용해야 하지만
      // 개발 시점에서는 경로가 올바른지만 확인
      assetStatus[path] = isValidAssetPath(path);
    }
    
    return assetStatus;
  }
}