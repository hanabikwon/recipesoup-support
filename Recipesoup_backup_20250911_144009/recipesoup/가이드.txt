## 기술 스택
- **프레임워크**: Flutter
- **데이터 저장**: [로컬]

## 핵심 문서
- **@CLAUDE.md**: 프로젝트 개요 및 작업 가이드 (이 문서)
- **@ARCHITECTURE.md**: 시스템 구조, DB 스키마, API 명세
- **@PROGRESS.md**: 개발 진행 상황, 완료/미완료 작업
- **@DESIGN.md**: UI/UX 디자인 가이드
- **@TESTPLAN.md**: 테스트 전략 및 테스트 케이스
- **@TESTDATA.md**: 테스트용 샘플 데이터
- **@NOTE.md**: 개발 중 발견한 이슈와 해결 방법

## 공통 작업 가이드
### 개발 프로세스
- 모든 작업은 ultra think 해서 작업해주세요.
- 모든 작업은 
  1. 먼저 현재 상태를 철저히 분석하고, 
  2. 철저하게 계획을 세우고, 
  3. sub agents 로 분리하지 말고, 순차적인 작업 계획을 작성한 후, 
  4. API 는 모두 TDD 기반으로 테스트 코드 및 실제 코드를 구현하고, 
  5. API 는 예외 케이스까지 완벽히 테스트하고, 
  6. 코드 완성 후에는 바로 종료하지 말고, 전체 코드를 코드 레벨로 확인하여, 확실한 버그가 발견되면, 수정해주세요
- 작업이 완료되면 꼭 기억해야할 내용에 대해서는 PROGRESS.md 파일에 기록해주고, 
- 필요시 CLAUDE.md 와 ARCHITECTURE.md 등의 다음 주요 파일들도 개선해주세요
- 모든 작업은 다음 주요 파일을 확인하여 작업해주세요
  - **@CLAUDE.md**: 전체 프로젝트 개요 및 기술스택과 작업 가이드
  - **@ARCHITECTURE.md**: 시스템 구조, DB 스키마, API 명세
  - **@PROGRESS.md**: 개발 진행 상황, 완료/미완료 작업 (작업 후 반드시 기억해야할 내용)
  - **@DESIGN.md**: UI/UX 디자인 가이드
    - wireframes 하위폴더에 UI 구현이 필요한 모든 화면은 xml 포멧으로 UI 화면 표현
  - **@TESTPLAN.md**: 테스트 항목
  - **@TESTDATA.md**: 테스트시 필요한 데이터
  - **@NOTE.md**: 빈번한 실수와 해결 방법 기억
- 작업 완료 후에는 테스트 항목을 @TESTPLAN.md 파일에 작성하고, Flutter 웹으로 빌드하여 크롬에서 실행한 후, puppeteer MCP 로 테스트하여, 모든 버그를 side effect 를 고려하여 신중하게 수정한 후, @TESTPLAN.md 에 기재된 모든 테스트 항목이 PASS 할 때까지 작업을 반복합니다
  - 주로 실수하는 항목은 @NOTE.md 파일에 이후 실수를 반복하지 않기 위해 기재합니다.


### 문서 업데이트
- 작업 완료 후 PROGRESS.md 업데이트
- 중요한 변경사항은 관련 문서 모두 업데이트
- 실수나 이슈는 NOTE.md에 기록

### 테스트 전략
- 단위 테스트: 모든 서비스와 유틸리티
- 위젯 테스트: UI 컴포넌트
- 통합 테스트: 주요 사용자 시나리오
- Flutter 웹 빌드 후 브라우저 테스트

## MCP 사용 설정 (옵션)
- 연결된 MCP 도구들을 여기에 기록
- 예: puppeteer MCP (브라우저 제어)