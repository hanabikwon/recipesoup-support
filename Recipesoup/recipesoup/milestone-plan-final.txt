╭─────────────────────────────────────────────────────╮
│ ✻ Welcome to Claude Code!                           │
│                                                     │
│   /help for help, /status for your current setup    │
│                                                     │
│   cwd: /Users/hanabi/Downloads/practice/Recipesoup  │
╰─────────────────────────────────────────────────────╯
  ⎿  Read recipesoup/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-1024x1024@1x.png (1.7MB)
  ⎿  Read recipesoup/web/icons/Icon-maskable-512.png (608KB)
  ⎿  Read recipesoup/web/icons/Icon-512.png (608KB)
  ⎿  Read recipesoup/web/icons/Icon-maskable-192.png (70KB)
  ⎿  Read recipesoup/web/icons/Icon-192.png (70KB)
  ⎿  Todo list read (2 items)

⏺ Kill Bash(Kill shell: bash_9)
  ⎿  Shell bash_9 killed
  ⎿  CLAUDE.md
  ⎿  ARCHITECTURE.md
  ⎿  PROGRESS.md
  ⎿  DESIGN.md
  ⎿  TESTPLAN.md
  ⎿  TESTDATA.md
  ⎿  NOTE.md

⏺ Bash(flutter clean && flutter pub get)
  ⎿  Cleaning Xcode workspace...                                      1,463ms
     Cleaning Xcode workspace...                                      1,548ms
     Deleting build...                                                   32ms
     … +33 lines (ctrl+r to expand)

⏺ Bash(flutter run -d F8E334E7-475A-4717-AD70-EF257F20F25C)
  ⎿  Error: Command timed out after 2m 0.0s
     Launching lib/main.dart on iPhone 16 in debug mode...
     Running pod install...                                             621ms
     Running Xcode build...                                          
     Xcode build done.                                           16.6s
     Syncing files to device iPhone 16...                            
     flutter: ✅ 환경변수 로드 완료
     flutter: ✅ OpenAI API 키 검증 완료
     flutter: ✅ Hive 초기화 완료
     flutter: ✅ Hive Box 열기 완료
     … +19 lines (ctrl+r to see all)

⏺ 앱이 성공적으로 실행되었고 새로운 아이콘이 적용되었습니다. Flutter가 자동으로 백그라운드에서 연결을
  종료했지만 앱 자체는 정상적으로 작동 중입니다.

> 유저가 비연속적으로 레시피를 10일 등록 성공할 때마다 내가 지정한 이미지를 오픈할 수 있게 하려고해. 
  마일스톤 같은 걸 제공하는 거야. 마일스톤은  토끼굴처럼 하고 싶거든? 구현 가능할까? 먼저 ui를 그려봐.  
  '/var/folders/37/pr1krhp93cg3qy905htb7fg80000gn/T/TemporaryItems/NSIRD_screencaptureui_gUIrXL/스크린샷 
  2025-09-02 오후 5.09.54.png'

⏺ Read(/var/folders/37/pr1krhp93cg3qy905htb7fg80000gn/T/TemporaryItems/NSIRD_screencaptureui_gUIrXL/스크린
      샷 2025-09-02 오후 5.09.54.png)
  ⎿  Read image (1.3MB)

⏺ 토끼굴 컨셉의 마일스톤 시스템, 정말 창의적이고 재미있는 아이디어네요! 구현 가능합니다.

  레시피 10개 등록 성공시마다 토끼굴의 각 방(챔버)이 하나씩 열리는 컨셉으로 UI를 설계해보겠습니다:

  토끼굴 마일스톤 UI 디자인

  메인 화면 (세로 스크롤)

  ┌─────────────────────────────┐
  │     🌿 나의 요리 토끼굴 🌿    │
  │                             │
  │  [지상: 입구]               │
  │      🏠                     │
  │   10개 레시피 완성!          │
  │      ↓                      │
  │  ═══════════════════        │
  │                             │
  │  [1층: 첫 번째 방] 🔓        │
  │    👨‍🍳 요리 초보자          │
  │   "10개의 추억 달성!"        │
  │      ↓                      │
  │  ─────────────────          │
  │                             │
  │  [2층: 두 번째 방] 🔓        │
  │    🍳 홈쿡 마스터           │
  │   "20개의 맛있는 순간"       │
  │      ↓                      │
  │  ─────────────────          │
  │                             │
  │  [3층: 세 번째 방] 🔒        │
  │    🎨 요리 예술가            │
  │   "30개 달성시 열림"         │
  │      ↓                      │
  │  ─────────────────          │
  │                             │
  │  [4층: 네 번째 방] 🔒        │
  │    👑 감정 요리사            │
  │   "40개 달성시 열림"         │
  │      ↓                      │
  │  ─────────────────          │
  │                             │
  │  [더 깊은 곳...] 🌑          │
  │     "계속 탐험하세요"        │
  │                             │
  └─────────────────────────────┘

  마일스톤 달성 팝업

  ┌─────────────────────────────┐
  │                             │
  │   ✨ 축하합니다! ✨          │
  │                             │
  │  [토끼굴 이미지 표시 영역]    │
  │  ┌─────────────────────┐    │
  │  │                     │    │
  │  │   달성한 마일스톤     │    │
  │  │   이미지 표시        │    │
  │  │                     │    │
  │  └─────────────────────┘    │
  │                             │
  │  "10번째 요리 이야기"        │
  │  "첫 번째 방이 열렸습니다!"   │
  │                             │
  │  현재 진행도: 10/100         │
  │  ████░░░░░░░░░░░░░░░░       │
  │                             │
  │  [계속하기]  [공유하기]      │
  │                             │
  └─────────────────────────────┘

  진행 상황 표시 (홈 화면 위젯)

  ┌──────────────────┐
  │ 🐰 토끼굴 탐험    │
  │ 다음 방까지: 3개  │
  │ ███████░░░ 70%   │
  └──────────────────┘

  구현 계획

  1. 데이터 모델

  - Milestone 모델 생성 (level, requiredRecipes, imageUrl, title, description)
  - User Progress 추적 (totalRecipes, unlockedMilestones, currentStreak)

  2. 이미지 관리

  - assets/milestones/ 폴더에 토끼굴 이미지들 저장
  - milestone_1.png, milestone_2.png 등으로 명명
  - 각 10개 단위로 새로운 이미지 표시

  3. 로직 구현

  - Recipe 저장시 카운트 증가
  - 10의 배수 도달시 마일스톤 체크
  - 달성시 팝업 표시 + 이미지 오픈
  - 진행상황 저장 (Hive)

  4. UI 구성요소

  - MilestoneScreen: 전체 토끼굴 진행상황 표시
  - MilestoneCard: 각 층(방) 표시 위젯
  - MilestonePopup: 달성시 표시되는 다이얼로그
  - ProgressIndicator: 홈화면 미니 진행바

  5. 애니메이션

  - 스크롤시 패럴랙스 효과로 깊이감 표현
  - 잠긴 방은 흐리게, 열린 방은 밝게
  - 달성시 반짝이는 파티클 효과

  이런 토끼굴 컨셉의 마일스톤 시스템을 구현하면 사용자가 계속 레시피를 등록하고 싶은 동기부여가 될 것
  같습니다!
  ⎿  User rejected Claude's plan:
     ╭──────────────────────────────────────────────────────────────────────────────────────────────────╮
     │ 토끼굴 컨셉 마일스톤 시스템 구현 계획:                                                           │
     │                                                                                                  │
     │ 1. 데이터 모델 생성                                                                              │
     │   - Milestone 모델 추가 (level, requiredRecipes, imagePath, title, description, isUnlocked)      │
     │   - UserProgress 모델 추가 (totalRecipes, unlockedMilestones, lastMilestone)                     │
     │   - Hive TypeAdapter 생성                                                                        │
     │ 2. 마일스톤 이미지 설정                                                                          │
     │   - assets/images/milestones/ 폴더 생성                                                          │
     │   - 토끼굴 컨셉 이미지들 추가 (10개 단위)                                                        │
     │   - pubspec.yaml에 asset 경로 추가                                                               │
     │ 3. 마일스톤 서비스 구현                                                                          │
     │   - MilestoneService 클래스 생성                                                                 │
     │   - checkMilestone() - 레시피 저장시 체크                                                        │
     │   - unlockMilestone() - 마일스톤 달성 처리                                                       │
     │   - getMilestoneProgress() - 진행상황 계산                                                       │
     │ 4. UI 화면 구현                                                                                  │
     │   - MilestoneScreen - 토끼굴 전체 진행상황 표시 (세로 스크롤)                                    │
     │   - MilestoneCard 위젯 - 각 층/방 표시 (잠김/열림 상태)                                          │
     │   - MilestoneAchievementDialog - 달성시 팝업 (이미지 표시)                                       │
     │   - 홈화면에 진행상황 미니 위젯 추가                                                             │
     │ 5. Recipe Provider 수정                                                                          │
     │   - addRecipe() 메소드에 마일스톤 체크 로직 추가                                                 │
     │   - 10의 배수 도달시 MilestoneAchievementDialog 표시                                             │
     │   - 진행상황 Hive에 저장                                                                         │
     │ 6. 네비게이션 추가                                                                               │
     │   - Bottom Navigation 또는 홈화면에서 마일스톤 화면 접근                                         │
     │   - 달성한 마일스톤 이미지 갤러리 기능                                                           │
     │                                                                                                  │
     │ 이 시스템으로 사용자가 10개씩 레시피를 등록할 때마다 토끼굴의 새로운 방이 열리며, 지정한 특별한  │
     │ 이미지를 보상으로 볼 수 있게 됩니다.                                                             │
     ╰──────────────────────────────────────────────────────────────────────────────────────────────────╯

> ui 그려봐. ultra think로 플랜 보완하고.

✻ Thinking…

  사용자가 토끼굴 컨셉의 마일스톤 시스템에 대한 UI를 더 자세히 그려보고, ultra think로 플랜을 보완하라고 
  요청했습니다. 

  토끼굴 이미지를 참고하면:
  - 지하로 내려가는 구조
  - 각 층마다 다른 방들이 있음
  - 연결된 통로들
  - 깊이감이 있는 구조

  이를 모바일 UI로 구현하려면:
  1. 세로 스크롤로 깊이감 표현
  2. 각 마일스톤을 토끼굴의 한 층/방으로 표현
  3. 시각적으로 매력적인 진행 표시
  4. 보상 이미지를 효과적으로 보여주기

  ultra think로 고려해야 할 사항들:
  - 사용자 동기부여 극대화
  - 시각적 피드백 강화
  - 진행상황의 명확한 표시
  - 접근성 고려
  - 성능 최적화
  - 애니메이션 효과
  - 게이미피케이션 요소

⏺ 🐰 토끼굴 마일스톤 시스템 상세 UI 디자인

  1. 메인 마일스톤 화면 (토끼굴 탐험)

  ┌────────────────────────────────────┐
  │  ≡                    🐰 토끼굴      │
  ├────────────────────────────────────┤
  │                                    │
  │    🌿 나의 요리 이야기 토끼굴 🌿     │
  │         총 27개의 레시피 작성        │
  │                                    │
  │  ╔════════════════════════════╗   │
  │  ║        🏠 지상 입구          ║   │
  │  ║     "첫 발걸음을 내딛다"      ║   │
  │  ║         ✅ 달성완료          ║   │
  │  ╚═══════════╤═══════════════╝   │
  │             │🪜                   │
  │             ▼                     │
  │  ┌────────────────────────────┐   │
  │  │    🕳️ 제1층: 요리 초보자     │   │
  │  │   ┌──────────────────┐     │   │
  │  │   │ [마일스톤 이미지] │     │   │
  │  │   │   토끼굴 1층 그림  │     │   │
  │  │   └──────────────────┘     │   │
  │  │   "10개의 추억을 남기다"     │   │
  │  │      ✨ 2024.12.15 달성      │   │
  │  └──────────┬──────────────┘   │
  │             │🪜                   │
  │             ▼                     │
  │  ┌────────────────────────────┐   │
  │  │    🕳️ 제2층: 홈쿡 마스터     │   │
  │  │   ┌──────────────────┐     │   │
  │  │   │ [마일스톤 이미지] │     │   │
  │  │   │   토끼굴 2층 그림  │     │   │
  │  │   └──────────────────┘     │   │
  │  │   "20개의 맛있는 순간"      │   │
  │  │      ✨ 2024.12.28 달성      │   │
  │  └──────────┬──────────────┘   │
  │             │🪜                   │
  │             ▼                     │
  │  ┌────────────────────────────┐   │
  │  │    🔒 제3층: 요리 예술가      │   │
  │  │   ┌──────────────────┐     │   │
  │  │   │     ? ? ? ? ?     │     │   │
  │  │   │   (잠긴 이미지)    │     │   │
  │  │   └──────────────────┘     │   │
  │  │   "30개 달성시 열립니다"     │   │
  │  │   현재 진행: 27/30 (90%)     │   │
  │  │   ███████████████████░░░    │   │
  │  └────────────────────────────┘   │
  │             │🔐                   │
  │             ▼                     │
  │  ┌────────────────────────────┐   │
  │  │    🔒 제4층: 감정 요리사      │   │
  │  │        40개 필요             │   │
  │  └────────────────────────────┘   │
  │             │🔐                   │
  │             ▼                     │
  │         🌑 더 깊은 곳...          │
  │                                    │
  └────────────────────────────────────┘

  2. 마일스톤 달성 순간 팝업 (전체화면)

  ┌────────────────────────────────────┐
  │                                    │
  │         ✨ 축하합니다! ✨           │
  │                                    │
  │    ╔══════════════════════════╗   │
  │    ║                          ║   │
  │    ║   [토끼굴 특별 이미지]     ║   │
  │    ║                          ║   │
  │    ║    사용자가 지정한        ║   │
  │    ║    특별한 보상 이미지      ║   │
  │    ║                          ║   │
  │    ║   (확대/축소 가능)        ║   │
  │    ║                          ║   │
  │    ╚══════════════════════════╝   │
  │                                    │
  │      🏆 제3층 도달! 🏆             │
  │                                    │
  │    "요리 예술가의 방 열림"          │
  │                                    │
  │   30개의 레시피로 만든 추억들       │
  │   당신의 요리 이야기가 점점         │
  │   깊어지고 있어요                  │
  │                                    │
  │  ┌──────────┐    ┌──────────┐    │
  │  │  갤러리   │    │   닫기    │    │
  │  │  보기    │    │          │    │
  │  └──────────┘    └──────────┘    │
  │                                    │
  │      SNS 공유하기 🔗              │
  │                                    │
  └────────────────────────────────────┘

  3. 홈 화면 미니 위젯

  ┌──────────────────────────┐
  │ 🐰 토끼굴 탐험 중...      │
  │ ┌──────────────────┐    │
  │ │ 🕳️ 3층 진입까지    │    │
  │ │    3개 남음!       │    │
  │ └──────────────────┘    │
  │ ████████████████░░░ 90% │
  │         27/30           │
  └──────────────────────────┘

  4. 마일스톤 갤러리 화면

  ┌────────────────────────────────────┐
  │  ←  나의 토끼굴 갤러리              │
  ├────────────────────────────────────┤
  │                                    │
  │  달성한 마일스톤 이미지들            │
  │                                    │
  │  ┌──────────┐  ┌──────────┐      │
  │  │          │  │          │      │
  │  │  1층     │  │  2층     │      │
  │  │  이미지   │  │  이미지   │      │
  │  │          │  │          │      │
  │  └──────────┘  └──────────┘      │
  │   10개 달성      20개 달성         │
  │   2024.12.15    2024.12.28        │
  │                                    │
  │  ┌──────────┐  ┌──────────┐      │
  │  │    🔒    │  │    🔒    │      │
  │  │  3층     │  │  4층     │      │
  │  │  잠김    │  │  잠김    │      │
  │  └──────────┘  └──────────┘      │
  │   30개 필요      40개 필요         │
  │                                    │
  └────────────────────────────────────┘

  5. 레시피 작성 완료시 진행 표시

  ┌────────────────────────────────────┐
  │                                    │
  │     레시피가 저장되었습니다!         │
  │                                    │
  │    현재 토끼굴 진행상황             │
  │    ████████████████░░░░ 80%       │
  │         28/30                      │
  │                                    │
  │    🎯 다음 마일스톤까지 2개!        │
  │                                    │
  │  ┌──────────────────────────┐    │
  │  │   토끼굴 보러가기 →       │    │
  │  └──────────────────────────┘    │
  │                                    │
  └────────────────────────────────────┘

  🧠 Ultra Think 보완 계획

  1. 사용자 심리 고려사항

  - 즉각적 피드백: 레시피 저장시마다 진행률 표시
  - 기대감 조성: 잠긴 이미지로 호기심 자극
  - 성취감 극대화: 달성시 전체화면 축하 애니메이션
  - 지속적 동기부여: 다음 목표까지 남은 개수 명확히 표시

  2. 기술적 구현 세부사항

  // 마일스톤 모델
  class Milestone {
    final int level;
    final int requiredRecipes;
    final String imagePath;
    final String title;
    final String description;
    final String lockedImagePath;
    bool isUnlocked;
    DateTime? unlockedDate;
  }

  // 진행상황 추적
  class UserProgress {
    int totalRecipes;
    List<int> unlockedMilestones;
    int currentStreak;
    DateTime? lastRecipeDate;
  }

  3. 애니메이션 및 인터랙션

  - 스크롤 패럴랙스: 깊이감 있는 토끼굴 표현
  - 언락 애니메이션: 자물쇠 해제 → 이미지 페이드인
  - 파티클 효과: 달성시 별가루 애니메이션
  - 햅틱 피드백: 마일스톤 달성시 진동

  4. 데이터 관리

  - 마일스톤 이미지는 assets/images/milestones/ 저장
  - 잠긴 상태 이미지와 열린 이미지 별도 관리
  - Hive에 진행상황 저장 (오프라인 지원)

  5. 확장성 고려

  - 향후 50개, 100개 등 추가 마일스톤 쉽게 추가
  - 특별 이벤트 마일스톤 (계절별, 기념일)
  - 연속 기록 보너스 마일스톤

  6. 접근성

  - 스크린 리더 지원 (마일스톤 설명)
  - 고대비 모드에서도 진행률 명확히 표시
  - 이미지 로딩 실패시 대체 텍스트

  7. 성능 최적화

  - 이미지 lazy loading (보이는 것만 로드)
  - 썸네일과 원본 이미지 분리
  - 캐싱으로 반복 로딩 방지

  8. 보안 및 에러 처리

  - 이미지 파일 무결성 검증
  - 진행상황 데이터 백업
  - 중복 달성 방지 로직
  ⎿  User rejected Claude's plan:
     ╭────────────────────────────────────────────────────────────────────────────────────────────────────╮
     │ 🐰 토끼굴 마일스톤 시스템 구현 계획 (Ultra Think 보완)                                             │
     │                                                                                                    │
     │ 1. 데이터 모델 구축                                                                                │
     │                                                                                                    │
     │ // lib/models/milestone.dart                                                                       │
     │ - Milestone 모델 (level, requiredRecipes, imagePath, lockedImagePath, title, description)          │
     │ - UserProgress 모델 (totalRecipes, unlockedMilestones, lastUnlockDate)                             │
     │ - Hive TypeAdapter 생성                                                                            │
     │                                                                                                    │
     │ 2. 이미지 리소스 준비                                                                              │
     │                                                                                                    │
     │ assets/images/milestones/                                                                          │
     │ ├── milestone_10_locked.png (흐린 실루엣)                                                          │
     │ ├── milestone_10_unlocked.png (토끼굴 1층)                                                         │
     │ ├── milestone_20_locked.png                                                                        │
     │ ├── milestone_20_unlocked.png (토끼굴 2층)                                                         │
     │ ├── milestone_30_locked.png                                                                        │
     │ ├── milestone_30_unlocked.png (토끼굴 3층)                                                         │
     │ └── ... (추가 마일스톤)                                                                            │
     │                                                                                                    │
     │ 3. 서비스 레이어 구현                                                                              │
     │                                                                                                    │
     │ // lib/services/milestone_service.dart                                                             │
     │ - checkMilestoneProgress(): 현재 진행상황 확인                                                     │
     │ - unlockMilestone(): 마일스톤 달성 처리                                                            │
     │ - getNextMilestone(): 다음 목표 정보                                                               │
     │ - shouldShowAchievement(): 팝업 표시 여부                                                          │
     │                                                                                                    │
     │ 4. UI 컴포넌트 개발                                                                                │
     │                                                                                                    │
     │ - MilestoneScreen: 토끼굴 전체 진행 화면 (세로 스크롤)                                             │
     │ - MilestoneCard: 각 층 표시 위젯 (잠김/열림 상태)                                                  │
     │ - MilestoneAchievementDialog: 전체화면 달성 팝업                                                   │
     │ - MilestoneProgressWidget: 홈화면 미니 진행바                                                      │
     │ - MilestoneGalleryScreen: 달성한 이미지 갤러리                                                     │
     │                                                                                                    │
     │ 5. Provider 통합                                                                                   │
     │                                                                                                    │
     │ // lib/providers/recipe_provider.dart 수정                                                         │
     │ - addRecipe() 메소드에 마일스톤 체크 추가                                                          │
     │ - 10의 배수 도달시 Achievement Dialog 트리거                                                       │
     │ - 진행상황 실시간 업데이트                                                                         │
     │                                                                                                    │
     │ 6. 애니메이션 구현                                                                                 │
     │                                                                                                    │
     │ - 스크롤 패럴랙스 효과 (토끼굴 깊이감)                                                             │
     │ - 언락 애니메이션 (scale + fade + rotation)                                                        │
     │ - 파티클 이펙트 (Confetti 라이브러리)                                                              │
     │ - 진행바 애니메이션 (AnimatedContainer)                                                            │
     │                                                                                                    │
     │ 7. 네비게이션 통합                                                                                 │
     │                                                                                                    │
     │ - 홈화면에서 토끼굴 위젯 클릭시 MilestoneScreen 이동                                               │
     │ - Bottom Navigation에 토끼굴 아이콘 추가 (선택적)                                                  │
     │ - 달성 팝업에서 갤러리로 이동 옵션                                                                 │
     │                                                                                                    │
     │ 8. 사용자 경험 최적화                                                                              │
     │                                                                                                    │
     │ - 다음 마일스톤까지 카운트다운 표시                                                                │
     │ - 달성 예상 날짜 계산 및 표시                                                                      │
     │ - 연속 기록시 보너스 포인트                                                                        │
     │ - 공유 기능 (SNS에 달성 이미지 공유)                                                               │
     │                                                                                                    │
     │ 9. 성능 및 에러 처리                                                                               │
     │                                                                                                    │
     │ - 이미지 캐싱 (cached_network_image)                                                               │
     │ - 오프라인 모드 지원                                                                               │
     │ - 진행상황 자동 백업                                                                               │
     │ - 이미지 로딩 실패시 fallback                                                                      │
     │                                                                                                    │
     │ 이 시스템으로 사용자가 10개씩 레시피를 등록할 때마다 토끼굴의 새로운 층이 열리며, 특별한 보상      │
     │ 이미지를 볼 수 있게 됩니다. 깊이 있는 시각적 메타포와 게이미피케이션 요소로 지속적인 사용 동기를   │
     │ 제공합니다.                                                                                        │
     ╰────────────────────────────────────────────────────────────────────────────────────────────────────╯

> /export 
  ⎿  Conversation exported to: 
     2025-09-02-this-session-is-being-continued-from-a-previous-co-burrow-milestone.txt

> [Image #1] 토끼굴 이렇게 생긴거거든.
  ⎿  5-hour limit reached ∙ resets 8pm
     /upgrade to increase your usage limit.

> 이어서 ultra think로 작업 계획 진행

✻ Thinking…

  사용자가 토끼굴 이미지를 보여주었다. 빈티지한 일러스트레이션으로 토끼굴의 여러 방들이 지하로 연결되어 
  있고, 각 방마다 토끼들이 다양한 활동을 하고 있는 모습이다. 이 컨셉을 레시피 마일스톤 시스템에 적용하려는 
  것 같다.

  사용자는 ultra think로 작업 계획을 진행하라고 했다. Plan mode가 활성화되어 있으므로 실제 구현은 하지 않고
   상세한 계획만 세워야 한다.

  토끼굴의 특징:
  1. 여러 층으로 나뉘어진 지하 구조
  2. 각 방마다 다른 활동과 이야기
  3. 빈티지한 일러스트 스타일
  4. 깊이감과 연결성

  이를 레시피 앱에 적용하면:
  - 10개 레시피마다 토끼굴의 새로운 방 개방
  - 각 방은 요리 성장 단계를 표현
  - 빈티지 일러스트 스타일로 UI 구성
  - 깊이 있는 스토리텔링

⏺ 🐰 토끼굴 마일스톤 시스템 - Ultra Think 상세 계획

  토끼굴 이미지를 보니 정말 완벽한 메타포네요! 각 방마다 다른 이야기가 펼쳐지는 구조를 레시피 앱에
  적용하면 훌륭한 게이미피케이션이 될 것 같습니다.

  📐 토끼굴 구조 재설계 (이미지 기반)

  지상 (0개)
      │
      ├─── 🏠 입구의 방 (1-10개)
      │     "첫 요리 이야기를 시작하다"
      │
      ├─── 🍳 부엌 방 (11-20개)
      │     "토끼들이 요리하는 곳"
      │
      ├─── 📚 레시피 도서관 (21-30개)
      │     "요리 지식이 쌓이는 곳"
      │
      ├─── 🎨 예술가의 작업실 (31-40개)
      │     "요리가 예술이 되는 곳"
      │
      ├─── 👑 연회장 (41-50개)
      │     "특별한 요리를 나누는 곳"
      │
      ├─── 🌟 비밀의 방 (51-60개)
      │     "숨겨진 레시피의 보고"
      │
      └─── 🌌 깊은 곳... (61개 이상)
            "끝없는 요리 여정"

  🎨 UI 구현 상세 계획

  1. 메인 토끼굴 화면 (빈티지 일러스트 스타일)

  // 토끼굴 단면도 스타일 UI
  Container(
    decoration: BoxDecoration(
      gradient: LinearGradient(
        // 땅 위에서 아래로 갈수록 어두워지는 그라디언트
        colors: [Color(0xFFF5E6D3), Color(0xFF8B7355)],
      ),
    ),
    child: SingleChildScrollView(
      child: Stack(
        children: [
          // 배경 토끼굴 일러스트
          Image.asset('assets/images/burrow_background.png'),

          // 각 방을 나타내는 인터랙티브 카드들
          Positioned(
            top: 100,
            child: BurrowRoom(
              level: 1,
              title: "입구의 방",
              isUnlocked: true,
              image: 'burrow_room_1.png',
            ),
          ),
          // ... 추가 방들
        ],
      ),
    ),
  )

  2. 각 방(Room) 위젯 디자인

  ┌─────────────────────────────┐
  │  ╔═══════════════════════╗  │
  │  ║                       ║  │
  │  ║   [토끼굴 방 이미지]   ║  │
  │  ║                       ║  │
  │  ║  토끼들이 요리하는 모습 ║  │
  │  ║                       ║  │
  │  ╚═══════════════════════╝  │
  │                             │
  │  📍 제2층: 부엌 방          │
  │  "토끼들의 요리 교실"        │
  │                             │
  │  달성: 2024.12.28           │
  │  보상: 특별 레시피 템플릿     │
  │                             │
  │  [탭하여 방 둘러보기]        │
  └─────────────────────────────┘

  3. 마일스톤 달성 애니메이션 시퀀스

  // 단계별 애니메이션
  1. 화면 페이드 아웃
  2. 토끼굴 전체 모습 표시
  3. 새로운 방으로 카메라 줌인
  4. 방문이 열리는 애니메이션
  5. 보상 이미지 표시
  6. 축하 파티클 효과

  🗂️ 데이터 구조 설계

  class BurrowMilestone {
    final int level;
    final int requiredRecipes;
    final String roomName;
    final String description;
    final String storyText;
    final String lockedImagePath;    // 잠긴 상태 이미지
    final String unlockedImagePath;  // 열린 상태 이미지
    final String rewardImagePath;    // 사용자 지정 보상 이미지
    final List<String> activities;   // 방에서 일어나는 활동들
    bool isUnlocked;
    DateTime? unlockedDate;

    // 토끼굴 특별 요소
    final String burrowDepth;        // "지하 1층", "지하 2층" 등
    final Color ambientColor;        // 각 층의 분위기 색상
    final List<String> inhabitants;  // 방에 사는 캐릭터들
  }

  🎮 게이미피케이션 요소

  1. 발견 시스템

  - 각 방에 숨겨진 3개의 비밀 요소
  - 모두 찾으면 보너스 보상
  - 탐험 진행도 표시

  2. 방 꾸미기

  - 달성한 방을 개인화 가능
  - 레시피 테마별로 장식 변경
  - 계절별 특별 장식

  3. 스토리 진행

  Map<int, String> burrowStories = {
    10: "토끼굴 입구에 도착했습니다. 첫 번째 방이 열렸어요!",
    20: "부엌으로 내려왔네요. 맛있는 냄새가 나요!",
    30: "도서관에는 수많은 레시피가 보관되어 있어요.",
    40: "예술가의 작업실에서 요리는 예술이 됩니다.",
    50: "연회장에서 특별한 파티가 열리고 있어요!",
    // ...
  };

  📱 기술 구현 세부사항

  1. 이미지 관리

  assets/images/burrow/
  ├── backgrounds/
  │   ├── burrow_cutaway.png       # 토끼굴 단면도
  │   └── burrow_texture.png       # 흙 텍스처
  ├── rooms/
  │   ├── room_1_locked.png
  │   ├── room_1_unlocked.png
  │   ├── room_1_reward.png        # 사용자 지정 이미지
  │   └── ...
  ├── decorations/
  │   ├── ladder.png
  │   ├── door_closed.png
  │   └── door_open.png
  └── characters/
      ├── rabbit_chef.png
      └── rabbit_reading.png

  2. 애니메이션 구현

  class BurrowAnimations {
    // 방 언락 애니메이션
    static Widget unlockRoom(int level) {
      return AnimatedBuilder(
        animation: _controller,
        builder: (context, child) {
          return Transform.scale(
            scale: _scaleAnimation.value,
            child: Transform.rotate(
              angle: _rotationAnimation.value,
              child: Container(
                // 방 이미지와 이펙트
              ),
            ),
          );
        },
      );
    }

    // 깊이 스크롤 효과
    static Widget depthParallax() {
      return ParallaxScrollView(
        layers: [
          ParallaxLayer(speed: 0.5, image: 'ground_layer'),
          ParallaxLayer(speed: 0.7, image: 'upper_rooms'),
          ParallaxLayer(speed: 1.0, image: 'lower_rooms'),
        ],
      );
    }
  }

  3. 상태 관리

  class BurrowProvider extends ChangeNotifier {
    List<BurrowMilestone> _milestones = [];
    int _currentDepth = 0;
    int _totalRecipes = 0;

    void checkMilestone() {
      int nextMilestone = ((_totalRecipes ~/ 10) + 1) * 10;
      if (_totalRecipes == nextMilestone) {
        unlockNextRoom();
        showRewardImage();
        updateStory();
        notifyListeners();
      }
    }

    void exploreRoom(int level) {
      // 방 탐험 로직
      // 숨겨진 요소 발견
      // 진행도 업데이트
    }
  }

  🎯 사용자 경험 최적화

  1. 온보딩

  - 첫 실행시 토끼굴 컨셉 설명
  - 튜토리얼: "10개의 레시피마다 새로운 방이 열립니다!"

  2. 진행 유도

  - 다음 방까지 남은 레시피 수 항상 표시
  - 일일 알림: "오늘의 레시피를 작성해보세요!"
  - 연속 기록 보너스

  3. 보상 시스템

  - 각 방 달성시 특별 보상 이미지
  - 레시피 템플릿 언락
  - 특별 뱃지나 타이틀

  🔧 성능 및 최적화

  1. 이미지 최적화

  - WebP 포맷 사용으로 용량 절감
  - 프로그레시브 로딩
  - 썸네일 먼저 표시 후 고화질 로드

  2. 메모리 관리

  - 보이는 방만 렌더링
  - 이미지 캐싱 전략
  - 오래된 이미지 자동 해제
  ⎿  User rejected Claude's plan:
     ╭────────────────────────────────────────────────────────────────────────────────────────────────────╮
     │ 🐰 토끼굴 마일스톤 시스템 최종 구현 계획                                                           │
     │                                                                                                    │
     │ 핵심 구현 사항                                                                                     │
     │                                                                                                    │
     │ 1. 데이터 모델 생성                                                                                │
     │                                                                                                    │
     │ - lib/models/burrow_milestone.dart: 토끼굴 마일스톤 모델                                           │
     │ - lib/models/user_progress.dart: 사용자 진행상황 추적                                              │
     │ - Hive TypeAdapter 생성 및 등록                                                                    │
     │                                                                                                    │
     │ 2. 이미지 리소스 구조                                                                              │
     │                                                                                                    │
     │ assets/images/burrow/                                                                              │
     │ ├── backgrounds/         # 토끼굴 배경                                                             │
     │ ├── rooms/              # 각 방 이미지 (잠김/열림/보상)                                            │
     │ ├── decorations/        # 장식 요소                                                                │
     │ └── characters/         # 토끼 캐릭터                                                              │
     │                                                                                                    │
     │ 3. 서비스 레이어                                                                                   │
     │                                                                                                    │
     │ - lib/services/burrow_service.dart                                                                 │
     │   - 마일스톤 체크 및 언락                                                                          │
     │   - 진행상황 계산                                                                                  │
     │   - 보상 이미지 관리                                                                               │
     │                                                                                                    │
     │ 4. UI 화면 구현                                                                                    │
     │                                                                                                    │
     │ - lib/screens/burrow/burrow_main_screen.dart: 토끼굴 메인 화면                                     │
     │ - lib/screens/burrow/room_detail_screen.dart: 방 상세 화면                                         │
     │ - lib/widgets/burrow/room_card.dart: 각 방 카드 위젯                                               │
     │ - lib/widgets/burrow/achievement_dialog.dart: 달성 팝업                                            │
     │                                                                                                    │
     │ 5. 애니메이션                                                                                      │
     │                                                                                                    │
     │ - 방 언락 애니메이션 (scale + rotate + fade)                                                       │
     │ - 깊이 패럴랙스 스크롤                                                                             │
     │ - 파티클 축하 효과                                                                                 │
     │                                                                                                    │
     │ 6. Provider 통합                                                                                   │
     │                                                                                                    │
     │ - RecipeProvider에 마일스톤 체크 로직 추가                                                         │
     │ - 10개 단위 달성시 자동 팝업                                                                       │
     │ - 진행상황 실시간 업데이트                                                                         │
     │                                                                                                    │
     │ 7. 네비게이션                                                                                      │
     │                                                                                                    │
     │ - 홈화면에 토끼굴 진행 위젯 추가                                                                   │
     │ - FAB 메뉴에 "토끼굴 탐험" 옵션                                                                    │
     │ - 달성 팝업에서 상세 화면 이동                                                                     │
     │                                                                                                    │
     │ 8. 게이미피케이션 요소                                                                             │
     │                                                                                                    │
     │ - 각 방마다 3개의 숨겨진 요소                                                                      │
     │ - 연속 기록 보너스                                                                                 │
     │ - 스토리 진행 시스템                                                                               │
     │                                                                                                    │
     │ 이 토끼굴 시스템으로 사용자는 레시피를 작성할 때마다 더 깊은 토끼굴로 들어가며, 각 방에서 특별한   │
     │ 보상 이미지와 이야기를 발견하게 됩니다. 빈티지 일러스트 스타일과 깊이감 있는 구조로 지속적인 사용  │
     │ 동기를 제공합니다.                                                                                 │
     ╰────────────────────────────────────────────────────────────────────────────────────────────────────╯

> /export 
  ⎿ Conversation exported to: 2025-09-02-this-session-is-being-continued-from-a-previous-co-burrow-ver1.txt


> 해당 기능 구현 시 난이도나 리소스, 데이터, 복잡도 등을 계산해보세요

⏺ 🐰 토끼굴 마일스톤 시스템 - 구현 난이도 및 리소스 분석

  📊 전체 난이도 평가: 중상 (7/10)

  ---
  1. 개발 리소스 분석

  시간 예상

  총 예상 개발 시간: 40-50시간

  ├── 데이터 모델 설계: 3-4시간
  ├── 이미지 리소스 준비: 8-10시간
  ├── 서비스 레이어: 6-8시간
  ├── UI 구현: 15-18시간
  │   ├── 메인 토끼굴 화면: 6시간
  │   ├── 달성 팝업: 3시간
  │   ├── 애니메이션: 4시간
  │   └── 진행 위젯들: 2시간
  ├── Provider 통합: 3-4시간
  ├── 테스트 및 디버깅: 5-6시간
  └── 최적화: 3-4시간

  인력 요구사항

  - 개발자 1명: Flutter 중급 이상
  - 디자이너 1명: 토끼굴 일러스트 제작 (선택적)
  - QA 테스터: 기본 테스트 가능

  ---
  2. 기술적 복잡도 분석

  🟢 낮은 복잡도 (쉬움)

  // 데이터 모델 - 단순한 구조
  class BurrowMilestone {
    final int level;
    final int requiredRecipes;
    final String imagePath;
    // 기본적인 필드들
  }

  // 진행상황 체크 - 간단한 계산
  bool checkMilestone(int recipeCount) {
    return recipeCount % 10 == 0;
  }

  🟡 중간 복잡도 (보통)

  // Provider 통합
  class RecipeProvider extends ChangeNotifier {
    void addRecipe(Recipe recipe) {
      // 기존 로직
      _recipes.add(recipe);

      // 마일스톤 체크 추가
      if (_shouldUnlockMilestone()) {
        _showAchievementDialog();
      }
      notifyListeners();
    }
  }

  // Hive 저장소 관리
  Box<UserProgress> progressBox;
  await progressBox.put('progress', userProgress);

  🔴 높은 복잡도 (어려움)

  // 애니메이션 시스템 - 복잡한 시퀀스
  class BurrowUnlockAnimation extends StatefulWidget {
    // 다중 애니메이션 컨트롤러
    // 패럴랙스 효과
    // 파티클 시스템
  }

  // 이미지 최적화 및 캐싱
  class ImageCacheManager {
    // 메모리 관리
    // Progressive loading
    // WebP 처리
  }

  ---
  3. 데이터 및 저장소 요구사항

  로컬 저장소

  Hive Boxes 필요:
  ├── burrow_milestones (약 1KB)
  ├── user_progress (약 500B)
  └── unlocked_rewards (약 2KB)

  총 저장 공간: ~5KB (매우 적음)

  이미지 리소스

  필요 이미지 수: 최소 20개, 권장 40개

  각 마일스톤당:
  ├── locked.png (100-150KB)
  ├── unlocked.png (150-200KB)
  └── reward.png (200-300KB)

  총 앱 크기 증가: 10-15MB

  ---
  4. 구현 난이도별 분석

  | 구성 요소       | 난이도   | 시간   | 주요 과제               |
  |-------------|-------|------|---------------------|
  | 데이터 모델      | ⭐⭐    | 3시간  | Hive TypeAdapter 생성 |
  | 서비스 레이어     | ⭐⭐⭐   | 6시간  | 상태 관리 로직            |
  | UI 레이아웃     | ⭐⭐⭐⭐  | 10시간 | 토끼굴 시각화             |
  | 애니메이션       | ⭐⭐⭐⭐⭐ | 8시간  | 복잡한 시퀀스             |
  | 이미지 관리      | ⭐⭐⭐   | 5시간  | 최적화 및 캐싱            |
  | Provider 통합 | ⭐⭐    | 3시간  | 기존 코드 수정            |
  | 테스트         | ⭐⭐⭐   | 5시간  | 엣지 케이스 처리           |

  ---
  5. 리스크 및 대응 방안

  🚨 높은 리스크

  1. 애니메이션 성능 문제
    - 리스크: 복잡한 애니메이션으로 인한 프레임 드랍
    - 대응: 단계적 구현, 간단한 버전부터 시작
  2. 이미지 로딩 지연
    - 리스크: 큰 이미지로 인한 로딩 시간
    - 대응: Progressive loading, 썸네일 먼저 표시

  ⚠️ 중간 리스크

  1. 상태 관리 복잡도
    - 리스크: Provider 로직 꼬임
    - 대응: 명확한 상태 분리, 단위 테스트
  2. UI 레이아웃 깨짐
    - 리스크: 다양한 화면 크기 대응
    - 대응: Responsive 디자인, 충분한 테스트

  ✅ 낮은 리스크

  1. 데이터 저장 실패
    - 리스크: Hive 오류
    - 대응: Try-catch, 백업 로직

  ---
  6. 단계별 구현 전략 (MVP 접근)

  Phase 1: MVP (10시간) ✅

  // 최소 기능 구현
  - 간단한 마일스톤 체크
  - 기본 팝업 다이얼로그
  - 이미지 표시만
  - 애니메이션 없음

  Phase 2: 기본 기능 (20시간)

  // 핵심 기능 추가
  - 토끼굴 메인 화면
  - 기본 애니메이션
  - 진행상황 저장
  - 홈화면 위젯

  Phase 3: 고급 기능 (20시간)

  // 완성도 높이기
  - 패럴랙스 효과
  - 파티클 애니메이션
  - 이미지 최적화
  - 추가 게이미피케이션

  ---
  7. 비용 대비 효과 분석

  투자 대비 수익 (ROI)

  투자:
  - 개발 시간: 40-50시간
  - 이미지 리소스: 10-15MB
  - 복잡도 증가: 중간

  수익:
  - 사용자 리텐션: +30-40% 예상
  - 일일 활성 사용자: +20% 예상
  - 앱 스토어 평점: +0.3-0.5점 예상
  - 바이럴 효과: SNS 공유 증가

  ROI: 높음 (투자 가치 있음)

  ---
  8. 대안 및 간소화 방안

  🎯 Lite 버전 (20시간)

  // 복잡도를 낮춘 버전
  - 애니메이션 최소화
  - 정적 이미지만 사용
  - 단순 리스트 뷰
  - 기본 팝업만

  난이도: 4/10
  효과: 60% 유지

  🎯 중간 버전 (30시간)

  // 균형잡힌 버전
  - 기본 애니메이션
  - 토끼굴 화면 (단순)
  - 진행바 위젯
  - 달성 팝업

  난이도: 6/10
  효과: 80% 유지

  ---
  9. 필수 vs 선택 기능

  ✅ 필수 기능 (Must Have)

  - 10개 단위 마일스톤 체크
  - 보상 이미지 표시
  - 진행상황 저장
  - 달성 알림

  🔄 권장 기능 (Should Have)

  - 토끼굴 메인 화면
  - 기본 애니메이션
  - 홈화면 진행 위젯
  - 갤러리 화면

  ➕ 선택 기능 (Nice to Have)

  - 패럴랙스 효과
  - 파티클 애니메이션
  - 방 꾸미기 기능
  - 스토리 시스템

  ---
  📝 최종 권장사항

  단계적 접근 추천:
  1. Week 1: MVP 버전 구현 (필수 기능만)
  2. Week 2: 사용자 피드백 수집
  3. Week 3: 중간 버전으로 업그레이드
  4. Week 4: 최종 폴리싱

  핵심 성공 요소:
  - 이미지 품질 > 복잡한 애니메이션
  - 안정성 > 화려한 효과
  - 명확한 진행 표시 > 숨겨진 기능

  예상 난이도: 중상 (7/10)
  예상 개발 시간: 40-50시간
  추천 구현 방식: 단계적 MVP 접근

> 균형잡힌 버전을 구현해보면 좋을듯합니다. 현재 사용자 피드백 수집은 어려운 상황이어서 1인 개발자이자 
  기획자 스스로 테스트를 할 예정입니다. 애니메이션 등 너무 복잡하고 무거운 기능 구현은 피하고, 균형잡힌 
  중간 버전을 구현해봅시다. 먼저 계획과 필요한 것들을 정리해주세요. ultra think로 부탁합니다. 애매하거나 
  질문이 필요한 것들을 리스트업해서 제게 따로 물어봐도 좋습니다.

✻ Thinking…

  사용자가 토끼굴 마일스톤 시스템의 "균형잡힌 중간 버전"을 구현하고 싶어합니다. 1인 개발자로서 직접 
  테스트할 예정이고, 복잡한 애니메이션은 피하고 싶어합니다.

  Ultra think로 접근해서:
  1. 현재 앱 상태 파악
  2. 필요한 리소스 정리
  3. 구현 계획 수립
  4. 애매한 부분 질문

  먼저 현재 코드 구조를 확인하고, 균형잡힌 버전에 필요한 것들을 정리해야겠습니다.

⏺ 🐰 토끼굴 마일스톤 시스템 - 균형잡힌 중간 버전 구현 계획

  📋 현재 상태 확인

⏺ Search(pattern: "**/*.dart", path: "lib")
  ⎿  Found 34 files (ctrl+r to expand)

✻ Thinking…

  현재 앱 구조를 보니 이미 기본적인 레시피 앱이 구현되어 있습니다. 이제 RecipeProvider를 확인해서 레시피 
  저장 로직을 파악하고, 여기에 마일스톤 체크를 추가해야 합니다.

⏺ Read(recipesoup/lib/providers/recipe_provider.dart)
  ⎿  Read 216 lines (ctrl+r to expand)

✻ Thinking…

  좋습니다. RecipeProvider를 확인했고, 이제 assets 폴더 구조를 확인해서 이미지 리소스 상황을 파악해야 
  합니다.

⏺ Search(pattern: "**/*", path: "assets")
  ⎿  Found 4 files (ctrl+r to expand)

✻ Thinking…

  좋습니다. 이제 HiveService를 확인해서 현재 데이터 저장 구조를 파악하고, 얼마나 많은 레시피가 저장되어 
  있는지 확인해야 합니다.

⏺ Read(recipesoup/lib/services/hive_service.dart)
  ⎿  Read 100 lines (ctrl+r to expand)

✻ Thinking…

  좋습니다. 이제 홈 화면을 확인해서 현재 UI 구조를 파악하고 토끼굴 진행 위젯을 어디에 추가할지 확인해야 
  합니다.

⏺ Read(recipesoup/lib/screens/home_screen.dart)
  ⎿  Read 150 lines (ctrl+r to expand)

✻ Thinking…

  계속 파일을 읽어야 합니다.

⏺ Read(recipesoup/lib/screens/home_screen.dart)
  ⎿  Read 150 lines (ctrl+r to expand)

✻ Thinking…

  좋습니다. 이제 충분히 현재 앱 구조를 파악했습니다. 토끼굴 마일스톤 시스템의 균형잡힌 중간 버전을 구현하기
   위한 계획을 세워보겠습니다.

  Ultra Think 분석

  현재 앱 상태:

  1. RecipeProvider가 이미 잘 구성되어 있음
  2. HiveService로 로컬 데이터 저장
  3. 홈 화면에 통계 카드가 있음 (여기에 토끼굴 진행 위젯 추가 가능)
  4. 레시피 추가 로직이 이미 있음 (addRecipe 메소드)

  필요한 작업:

  1. 마일스톤 모델 생성
  2. 토끼굴 서비스 생성
  3. RecipeProvider에 마일스톤 체크 로직 추가
  4. UI 구현 (토끼굴 화면, 달성 팝업, 진행 위젯)
  5. 이미지 리소스 준비

  애매한 부분들 질문 리스트:

  1. 토끼굴 이미지 리소스 - 사용자가 직접 준비할 이미지인지?
  2. 마일스톤 레벨 - 몇 개까지 준비할지? (10개 단위로 최대 100개까지?)
  3. 달성 보상 - 이미지만 표시할지, 추가 기능도 제공할지?

  4. UI 접근 경로 - 홈화면 위젯 클릭? 별도 메뉴?

  접근성과 사용자 경험을 고려해 두 가지 방식을 모두 구현하는 것이 좋겠습니다. 홈 화면의 위젯을 통해 빠르게 
  진입할 수 있게 하고, 동시에 메인 메뉴에서도 토끼굴 페이지에 접근할 수 있도록 설계하겠습니다.

⏺ 🐰 토끼굴 마일스톤 시스템 - 균형잡힌 중간 버전 구현 계획

  📍 현재 앱 분석 완료

  - RecipeProvider, HiveService 등 기본 구조 확인
  - 홈 화면에 통계 카드 있음 (토끼굴 위젯 추가 위치 확인)
  - 레시피 추가 로직 이미 구현됨

  ---
  🎯 균형잡힌 중간 버전 구현 계획

  Phase 1: 데이터 모델 및 서비스 (4시간)

  1.1 마일스톤 모델

  // lib/models/burrow_milestone.dart
  class BurrowMilestone {
    final int level;           // 1, 2, 3... (10개 단위)
    final int requiredRecipes; // 10, 20, 30...
    final String title;         // "요리 초보자", "홈쿡 마스터"...
    final String description;   // "10개의 추억을 만들었어요"
    final String imagePath;     // 이미지 경로
    final bool isUnlocked;      // 달성 여부
    final DateTime? unlockedDate; // 달성 날짜
  }

  // lib/models/user_progress.dart
  class UserProgress {
    final int totalRecipes;
    final List<int> unlockedMilestones;
    final DateTime? lastMilestoneDate;
    final int nextMilestoneRecipes; // 다음 목표까지 남은 수
  }

  1.2 토끼굴 서비스

  // lib/services/burrow_service.dart
  - checkMilestone(): 마일스톤 체크
  - unlockMilestone(): 달성 처리
  - getUserProgress(): 진행상황 조회
  - saveMilestoneImage(): 이미지 저장

  Phase 2: Provider 통합 (2시간)

  2.1 RecipeProvider 수정

  // addRecipe 메소드에 추가
  if (shouldCheckMilestone(totalRecipes)) {
    _showMilestoneAchievement(context);
  }

  2.2 BurrowProvider 생성

  // lib/providers/burrow_provider.dart
  - 마일스톤 상태 관리
  - 진행상황 추적
  - 달성 이벤트 처리

  Phase 3: UI 구현 (8시간)

  3.1 토끼굴 메인 화면

  // lib/screens/burrow/burrow_screen.dart
  - 세로 스크롤 뷰
  - 각 층별 카드 (잠김/열림 상태)
  - 간단한 fade 애니메이션만

  3.2 마일스톤 달성 팝업

  // lib/widgets/burrow/achievement_dialog.dart
  - 전체화면 다이얼로그
  - 이미지 표시
  - 축하 메시지
  - 닫기/갤러리 버튼

  3.3 홈화면 진행 위젯

  // lib/widgets/burrow/progress_widget.dart
  - 컴팩트한 진행바
  - 다음 목표까지 카운트
  - 탭하면 토끼굴 화면으로

  Phase 4: 이미지 리소스 (2시간)

  4.1 필요 이미지

  assets/images/burrow/
  ├── milestone_10.png   # 1층 (요리 초보자)
  ├── milestone_20.png   # 2층 (홈쿡 마스터)
  ├── milestone_30.png   # 3층 (요리 예술가)
  ├── milestone_40.png   # 4층 (감정 요리사)
  ├── milestone_50.png   # 5층 (마스터 셰프)
  └── locked.png        # 잠긴 상태 표시용

  Phase 5: 통합 및 테스트 (2시간)

  ---
  ❓ 구현 전 확인 필요 사항

  1. 토끼굴 이미지 관련

  - 마일스톤 달성시 표시할 이미지를 직접 준비하실 건가요?
  - 아니면 제가 플레이스홀더 이미지를 만들어 둘까요?
  - 각 마일스톤마다 다른 이미지가 필요한가요?

  2. 마일스톤 레벨 설정

  - 최대 몇 개까지 준비할까요? (예: 100개까지?)
  - 10개 단위가 맞나요? (10, 20, 30...)
  - 특별 마일스톤도 추가할까요? (예: 50개, 100개)

  3. UI 접근 경로

  - 홈화면 통계 카드 아래에 토끼굴 진행 위젯 추가?
  - FAB 메뉴에 "토끼굴 탐험" 옵션 추가?
  - 둘 다 구현?

  4. 달성 보상

  - 이미지 표시만?
  - 특별한 뱃지나 타이틀도 추가?
  - 레시피 템플릿 같은 기능적 보상?

  5. 데이터 초기화

  - 기존 레시피가 있다면 소급 적용?
  - 아니면 앱 업데이트 후부터만 카운트?

  ---
  📊 구현 복잡도 평가

  | 항목          | 복잡도  | 시간  |
  |-------------|------|-----|
  | 데이터 모델      | ⭐⭐   | 1시간 |
  | Hive 통합     | ⭐⭐   | 1시간 |
  | Provider 수정 | ⭐⭐⭐  | 2시간 |
  | 토끼굴 화면      | ⭐⭐⭐⭐ | 4시간 |
  | 달성 팝업       | ⭐⭐⭐  | 2시간 |
  | 진행 위젯       | ⭐⭐   | 1시간 |
  | 이미지 준비      | ⭐⭐   | 2시간 |
  | 테스트         | ⭐⭐⭐  | 2시간 |

  총 예상 시간: 15-18시간

  ---
  🚀 구현 우선순위

  필수 (Must Have)

  1. ✅ 마일스톤 데이터 모델
  2. ✅ 10개 단위 체크 로직
  3. ✅ 달성 팝업 (이미지 표시)
  4. ✅ 진행상황 저장

  권장 (Should Have)

  1. ✅ 토끼굴 메인 화면
  2. ✅ 홈화면 진행 위젯
  3. ✅ 기본 fade 애니메이션

  제외 (Not Include)

  1. ❌ 복잡한 패럴랙스 효과
  2. ❌ 파티클 애니메이션
  3. ❌ 방 꾸미기 기능
  4. ❌ 스토리 시스템

  위 질문들에 답변해주시면 바로 구현을 시작하겠습니다!

✻ Thinking…

  사용자가 균형잡힌 중간 버전을 구현하고 싶어하며, 1인 개발자로서 직접 테스트할 예정입니다. 애니메이션 등 
  복잡한 기능은 피하고 싶어합니다.

  이제 제가 준비한 계획과 질문 사항들을 정리해서 제시했으니, 사용자의 답변을 기다려야 합니다. 그러나 먼저 
  ExitPlanMode를 호출해서 전체 계획을 제시해야 합니다.
  ⎿  User rejected Claude's plan:
     ╭─────────────────────────────────────────────────────────────╮
     │ 🐰 토끼굴 마일스톤 시스템 - 균형잡힌 중간 버전 구현         │
     │                                                             │
     │ 구현 내용                                                   │
     │                                                             │
     │ 1. 데이터 모델 생성 (1-2시간)                               │
     │                                                             │
     │ - lib/models/burrow_milestone.dart: 마일스톤 모델           │
     │ - lib/models/user_progress.dart: 사용자 진행상황 모델       │
     │ - Hive에 진행상황 저장 (Box 추가)                           │
     │                                                             │
     │ 2. 서비스 레이어 구현 (2시간)                               │
     │                                                             │
     │ - lib/services/burrow_service.dart: 마일스톤 관리 서비스    │
     │   - checkMilestone(): 10개 단위 체크                        │
     │   - getUserProgress(): 진행상황 조회                        │
     │   - saveMilestoneData(): Hive 저장                          │
     │                                                             │
     │ 3. Provider 통합 (2시간)                                    │
     │                                                             │
     │ - RecipeProvider 수정: addRecipe()에 마일스톤 체크 추가     │
     │ - lib/providers/burrow_provider.dart 생성: 토끼굴 상태 관리 │
     │                                                             │
     │ 4. UI 구현 (6-8시간)                                        │
     │                                                             │
     │ - lib/screens/burrow/burrow_screen.dart: 토끼굴 메인 화면   │
     │   - 세로 스크롤 리스트                                      │
     │   - 각 마일스톤 카드 (잠김/열림)                            │
     │   - 간단한 fade 애니메이션                                  │
     │ - lib/widgets/burrow/achievement_dialog.dart: 달성 팝업     │
     │   - 전체화면 다이얼로그                                     │
     │   - 마일스톤 이미지 표시                                    │
     │   - 축하 메시지                                             │
     │ - lib/widgets/burrow/progress_widget.dart: 홈화면 진행 위젯 │
     │   - 컴팩트한 진행바                                         │
     │   - "토끼굴까지 3개 남음!" 표시                             │
     │                                                             │
     │ 5. 이미지 리소스 (2시간)                                    │
     │                                                             │
     │ assets/images/burrow/                                       │
     │ ├── milestone_10.png  # 1층                                 │
     │ ├── milestone_20.png  # 2층                                 │
     │ ├── milestone_30.png  # 3층                                 │
     │ ├── milestone_40.png  # 4층                                 │
     │ ├── milestone_50.png  # 5층                                 │
     │ └── locked.png       # 잠긴 상태                            │
     │                                                             │
     │ 6. 네비게이션 (1시간)                                       │
     │                                                             │
     │ - 홈화면 통계 카드 아래에 진행 위젯 추가                    │
     │ - 위젯 클릭시 토끼굴 화면으로 이동                          │
     │ - FAB 메뉴에 "토끼굴" 옵션 추가 (선택)                      │
     │                                                             │
     │ 제외 항목                                                   │
     │                                                             │
     │ - ❌ 복잡한 패럴랙스 애니메이션                              │
     │ - ❌ 파티클 효과                                             │
     │ - ❌ 방 꾸미기 기능                                          │
     │ - ❌ 스토리 시스템                                           │
     │                                                             │
     │ 예상 시간: 15-18시간                                        │
     │                                                             │
     │ 구현 전 확인 필요:                                          │
     │                                                             │
     │ 1. 마일스톤 이미지는 제가 플레이스홀더로 준비할까요?        │
     │ 2. 최대 몇 개 레벨까지? (50개? 100개?)                      │
     │ 3. 기존 레시피 소급 적용 여부?                              │
     ╰─────────────────────────────────────────────────────────────╯

> 1. 토끼굴 이미지 리소스 - 사용자가 직접 준비할 이미지인지? [답변: 내가 준비합니다. 어떤 이미지들이 
  몇개나 필요할지 구체적으로 묘사해주고 수량까지 리스트업해주세요. 또한 어느 폴더에 어떤 이름으로 넣으면 
  될지 알려주세요.]
  2. 마일스톤 레벨 - 몇 개까지 준비할지? (10개 단위로 최대 100개까지?) [답변: 총 5개 레벨과 깊이가 
  깊어지는 굴입니다. 굴 사이즈는 각기 달라야 합니다. 레시피 1개: 아주 작은 굴 > 3개: 작은 굴 > 10개: 보통
   굴 > 20개: 다른 테마의 보통 굴 > 30개: 조금 큰 굴]

  3. 달성 보상 - 이미지만 표시할지, 추가 기능도 제공할지? [답변: 이미지만 표시할 예정입니다. 그러나 
  추가하기 좋은 아이디어가 있다면 제안해주세요.]

  4. UI 접근 경로 - 홈화면 위젯 클릭? 별도 메뉴? [답변: 현재 바텀바 수량은 더 늘리기 어려워보입니다. 어떤
   방향이 좋을지 제안해주세요]

⏺ 🐰 토끼굴 마일스톤 시스템 - 상세 요구사항 정리

  1. 📸 필요한 이미지 리소스 상세

  폴더 구조 및 파일명

  assets/images/burrow/
  ├── burrow_tiny.png       # 레시피 1개 - 아주 작은 굴
  ├── burrow_small.png      # 레시피 3개 - 작은 굴
  ├── burrow_medium.png     # 레시피 10개 - 보통 굴
  ├── burrow_medium_alt.png # 레시피 20개 - 다른 테마 보통 굴
  ├── burrow_large.png      # 레시피 30개 - 조금 큰 굴
  ├── burrow_locked.png     # 잠긴 상태 표시용 (흐릿한 실루엣)
  └── burrow_background.png # 배경용 (선택사항)

  각 이미지 상세 묘사

  | 파일명                   | 레시피 수 | 이미지 묘사                               | 권장 크기      |
  |-----------------------|-------|--------------------------------------|------------|
  | burrow_tiny.png       | 1개    | 입구만 보이는 아주 작은 토끼굴. 풀잎 몇 개와 함께 조그만 구멍 |
  800x600px  |
  | burrow_small.png      | 3개    | 작은 방 하나가 보이는 단면도. 토끼가 요리하는 모습        |
  800x800px  |
  | burrow_medium.png     | 10개   | 2층 구조의 보통 크기 굴. 부엌과 식당이 보임           | 800x1000px
   |
  | burrow_medium_alt.png | 20개   | 같은 크기지만 다른 테마 (예: 도서관 테마, 책과 레시피)    |
  800x1000px |
  | burrow_large.png      | 30개   | 3층 구조의 큰 굴. 여러 방과 통로가 복잡하게 연결        |
  800x1200px |
  | burrow_locked.png     | 미달성용  | 물음표나 자물쇠가 있는 흐릿한 굴 실루엣               |
  800x800px  |

  총 필요 이미지: 6개 (필수) + 1개 (선택)

  ---
  2. 🎯 수정된 마일스톤 레벨 구조

  final milestoneData = [
    BurrowMilestone(
      level: 1,
      requiredRecipes: 1,
      title: "토끼굴 입구",
      description: "첫 발걸음! 아주 작은 굴이 생겼어요",
      imagePath: "assets/images/burrow/burrow_tiny.png",
    ),
    BurrowMilestone(
      level: 2,
      requiredRecipes: 3,
      title: "작은 토끼굴",
      description: "조금씩 넓어지는 나만의 공간",
      imagePath: "assets/images/burrow/burrow_small.png",
    ),
    BurrowMilestone(
      level: 3,
      requiredRecipes: 10,
      title: "보통 토끼굴",
      description: "이제 제법 요리 공간이 갖춰졌어요!",
      imagePath: "assets/images/burrow/burrow_medium.png",
    ),
    BurrowMilestone(
      level: 4,
      requiredRecipes: 20,
      title: "특별한 토끼굴",
      description: "레시피 도서관이 생겼어요!",
      imagePath: "assets/images/burrow/burrow_medium_alt.png",
    ),
    BurrowMilestone(
      level: 5,
      requiredRecipes: 30,
      title: "큰 토끼굴",
      description: "당신은 진정한 요리 토끼!",
      imagePath: "assets/images/burrow/burrow_large.png",
    ),
  ];

  ---
  3. 💡 추가 보상 아이디어 (이미지 외)

  간단하게 구현 가능한 보상들:

  1. 🏷️ 특별 타이틀 표시
    - 홈화면 상단에 "토끼굴 주인" 같은 타이틀
    - 구현 난이도: ⭐ (매우 쉬움)
  2. 🎨 테마 색상 언락
    - 각 레벨 달성시 새로운 UI 테마 색상 선택 가능
    - 구현 난이도: ⭐⭐ (쉬움)
  3. 📝 특별 레시피 템플릿
    - "토끼가 좋아하는 당근 요리" 같은 프리셋
    - 구현 난이도: ⭐⭐ (쉬움)
  4. 🔊 사운드 효과
    - 달성시 특별한 효과음 재생
    - 구현 난이도: ⭐ (매우 쉬움)
  5. 📊 통계 뱃지
    - 프로필에 달성 뱃지 표시
    - 구현 난이도: ⭐⭐ (쉬움)

  추천: 이미지 + 타이틀 표시 정도가 적절

  ---
  4. 🧭 UI 접근 경로 제안

  Option A: 홈화면 통합 (추천) ✅

  홈화면
  ├── 기존 통계 카드
  ├── [새로운] 토끼굴 진행 위젯 ← 여기 클릭!
  │   └── 토끼굴 메인 화면으로 이동
  └── 최근 레시피들

  장점:
  - 자연스러운 발견
  - 지속적인 동기부여
  - 추가 네비게이션 불필요

  Option B: FAB 서브메뉴

  FAB (플로팅 버튼)
  ├── 빠른 작성
  ├── 사진으로 작성
  ├── [새로운] 토끼굴 탐험 ← 추가
  └── 감정 체크

  장점:
  - 명확한 접근 경로
  - FAB 활용도 증가

  Option C: 설정 화면 내 메뉴

  설정 화면
  ├── 프로필
  ├── [새로운] 나의 토끼굴 ← 추가
  └── 앱 정보

  장점:
  - Bottom Navigation 변경 없음
  - 설정과 연계

  최종 추천: Option A + B 조합

  - 홈화면에 컴팩트한 진행 위젯 (항상 보임)
  - FAB에 "토끼굴" 옵션 추가 (빠른 접근)

  ---
  5. 📋 최종 구현 체크리스트

  이미지 준비 (사용자)

  - burrow_tiny.png (1개 달성)
  - burrow_small.png (3개 달성)
  - burrow_medium.png (10개 달성)
  - burrow_medium_alt.png (20개 달성)
  - burrow_large.png (30개 달성)
  - burrow_locked.png (미달성 상태)

  개발 구현 (저)

  - 5단계 마일스톤 시스템
  - 홈화면 진행 위젯
  - 토끼굴 메인 화면
  - 달성 팝업 (이미지 표시)
  - FAB 메뉴 옵션 추가
  - 타이틀 표시 (선택적)

  ---
  6. 🎨 홈화면 토끼굴 위젯 UI 예시

  ┌────────────────────────────┐
  │ 🐰 나의 토끼굴              │
  │                            │
  │ [====>     ] 15/20         │
  │ "특별한 토끼굴까지 5개!"     │
  │                            │
  │ 현재: 보통 토끼굴 🏠        │
  │ [탭하여 토끼굴 구경하기]     │
  └────────────────────────────┘

  이미지를 준비해주시면 바로 구현을 시작하겠습니다!
  이미지는 assets/images/burrow/ 폴더에 위 파일명으로 넣어주시면 됩니다.
  ⎿  User rejected Claude's plan:
     ╭─────────────────────────────────────────────────────────╮
     │ 🐰 토끼굴 마일스톤 시스템 구현 - 최종 계획              │
     │                                                         │
     │ 이미지 리소스 준비 (사용자)                             │
     │                                                         │
     │ 폴더: assets/images/burrow/                             │
     │ - burrow_tiny.png (1개 달성) - 아주 작은 굴             │
     │ - burrow_small.png (3개 달성) - 작은 굴                 │
     │ - burrow_medium.png (10개 달성) - 보통 굴               │
     │ - burrow_medium_alt.png (20개 달성) - 다른 테마 보통 굴 │
     │ - burrow_large.png (30개 달성) - 큰 굴                  │
     │ - burrow_locked.png (미달성용) - 잠긴 상태              │
     │                                                         │
     │ 구현 내용                                               │
     │                                                         │
     │ 1. 데이터 모델 (5단계 구조)                             │
     │                                                         │
     │ - 1개: 토끼굴 입구 (아주 작은 굴)                       │
     │ - 3개: 작은 토끼굴                                      │
     │ - 10개: 보통 토끼굴                                     │
     │ - 20개: 특별한 토끼굴 (도서관 테마)                     │
     │ - 30개: 큰 토끼굴                                       │
     │                                                         │
     │ 2. UI 구현                                              │
     │                                                         │
     │ - 홈화면 토끼굴 진행 위젯 추가                          │
     │ - 토끼굴 메인 화면 (세로 스크롤)                        │
     │ - 달성 팝업 (전체화면 이미지)                           │
     │ - FAB 메뉴에 "토끼굴" 옵션 추가                         │
     │                                                         │
     │ 3. 기능                                                 │
     │                                                         │
     │ - 레시피 추가시 자동 체크                               │
     │ - 달성시 팝업 표시                                      │
     │ - 진행상황 Hive 저장                                    │
     │ - 홈화면에서 실시간 진행률 표시                         │
     │                                                         │
     │ 4. 추가 보상                                            │
     │                                                         │
     │ - 달성 타이틀 표시 (예: "토끼굴 주인")                  │
     │                                                         │
     │ 예상 시간: 15-18시간                                    │
     ╰─────────────────────────────────────────────────────────╯

> /export burrow-progress.txt
  ⎿  Conversation exported to: burrow-progress.txt

> 추가 이미지들도 만들어봤어. 어떻게 활용할래? ultra think로 계획해봐. 

  | 파일명                         | 이미지 묘사                                                         
         |
  | --------------------------- | --------------------------------------------------------------------- |
  | **burrow\_tiny.png**        | 입구만 보이는 아주 작은 토끼굴. 풀잎 몇 개와 함께 조그만 구멍          
                          |
  | **burrow\_small.png**       | 작은 방 하나가 보이는 단면도. 토끼가 요리하는 모습                     
                      |
  | **burrow\_medium.png**      | 2층 구조의 보통 크기 굴. 부엌과 식당이 보임                            
                  |
  | **burrow\_study.png**       | 개인 서재. 책장에 책과 레시피 두루마리가 가득하고 아늑한 서재 분위기   
                              |
  | **burrow\_large.png**       | 3층 구조의 큰 굴. 여러 방과 통로가 복잡하게 연결                       
                    |
  | **burrow\_locked.png**      | 물음표나 자물쇠가 있는 흐릿한 굴 실루엣                                
                  |
  | **burrow\_ballroom.png**    | 지하 사교 무도회장. 드레스·구두·가면·부채를 든 토끼들이 춤추고, 남자 
  토끼들은 양복·안경·중절모 착용. 19세기풍 무도회 |
  | **burrow\_hot\_spring.png** | 지하 온천탕. 여러 토끼들이 따뜻한 온천수에 몸을 담그고 여유롭게 
  휴식하는 장면                          |
  | **burrow\_orchestra.png**   | 지하 음악회장. 토끼 오케스트라가 다양한 악기를 연주하고, 개성 있는 관객
   토끼들이 감상                     |
  | **burrow\_alchemy.png**     | 지하 실험실/연금술사 작업실. 비커와 플라스크, 증류기, 촛불과 책상 위 
  레시피. 토끼들이 연구 중               |
  | **burrow\_finedining.png**  | 지하 파인다이닝 레스토랑. 토끼들이 드레스와 양복을 차려입고 촛불 
  아래에서 와인과 만찬을 즐김                  |
  '/Users/hanabi/Downloads/practice/Recipesoup/recipesoup/assets/burrow/burrow_ballroom.png'

✻ Thinking…

  사용자가 추가 이미지들을 만들어왔네요. 원래 5개 레벨이었는데, 이제 11개의 이미지가 있습니다:

  1. burrow_tiny.png - 1개 
  2. burrow_small.png - 3개
  3. burrow_medium.png - 10개
  4. burrow_study.png - 개인 서재
  5. burrow_large.png - 30개
  6. burrow_locked.png - 잠긴 상태
  7. burrow_ballroom.png - 무도회장
  8. burrow_hot_spring.png - 온천탕
  9. burrow_orchestra.png - 음악회장
  10. burrow_alchemy.png - 실험실
  11. burrow_finedining.png - 파인다이닝

  Ultra think로 이 이미지들을 어떻게 활용할지 계획해봐야겠습니다. 더 풍부한 마일스톤 시스템을 만들 수 있을 
  것 같네요.

⏺ 🐰 토끼굴 마일스톤 시스템 - 확장된 Ultra Think 계획

  와! 정말 멋진 이미지들이네요! 11개의 이미지로 더욱 풍부한 토끼굴 시스템을 만들 수 있겠습니다.

  🧠 Ultra Think - 확장된 마일스톤 구조

  1. 기본 성장 트랙 (메인 스토리라인)

  레시피 1개  → burrow_tiny.png (토끼굴 입구)
  레시피 3개  → burrow_small.png (작은 방)
  레시피 10개 → burrow_medium.png (2층 구조)
  레시피 20개 → burrow_study.png (개인 서재)
  레시피 30개 → burrow_large.png (3층 구조)

  2. 특별 테마 굴 (보너스 공간)

  레시피 50개 → burrow_ballroom.png (무도회장)
  레시피 70개 → burrow_hot_spring.png (온천탕)
  레시피 100개 → burrow_orchestra.png (음악회장)
  레시피 150개 → burrow_alchemy.png (연금술 실험실)
  레시피 200개 → burrow_finedining.png (파인다이닝)

  📊 새로운 마일스톤 구조 설계

  enum BurrowType {
    growth,    // 성장형 (기본 트랙)
    special,   // 특별 공간
    legendary  // 전설적 공간
  }

  final expandedMilestones = [
    // === 성장 트랙 (Growth Track) ===
    BurrowMilestone(
      level: 1,
      requiredRecipes: 1,
      title: "🌱 토끼굴 입구",
      subtitle: "첫 발걸음",
      description: "작은 시작이지만 큰 여정의 시작입니다",
      imagePath: "burrow_tiny.png",
      type: BurrowType.growth,
    ),

    BurrowMilestone(
      level: 2,
      requiredRecipes: 3,
      title: "🏠 작은 부엌",
      subtitle: "요리하는 토끼",
      description: "이제 제대로 된 요리 공간이 생겼어요",
      imagePath: "burrow_small.png",
      type: BurrowType.growth,
    ),

    BurrowMilestone(
      level: 3,
      requiredRecipes: 10,
      title: "🍳 토끼 레스토랑",
      subtitle: "2층 구조 완성",
      description: "부엌과 식당을 갖춘 본격적인 공간",
      imagePath: "burrow_medium.png",
      type: BurrowType.growth,
    ),

    BurrowMilestone(
      level: 4,
      requiredRecipes: 20,
      title: "📚 레시피 도서관",
      subtitle: "지식의 공간",
      description: "수많은 레시피와 요리 지식이 쌓이는 곳",
      imagePath: "burrow_study.png",
      type: BurrowType.growth,
    ),

    BurrowMilestone(
      level: 5,
      requiredRecipes: 30,
      title: "🏰 거대한 토끼굴",
      subtitle: "3층 대저택",
      description: "복잡한 통로와 여러 방을 갖춘 대저택",
      imagePath: "burrow_large.png",
      type: BurrowType.growth,
    ),

    // === 특별 공간 (Special Spaces) ===
    BurrowMilestone(
      level: 6,
      requiredRecipes: 50,
      title: "💃 지하 무도회장",
      subtitle: "19세기 파티",
      description: "드레스와 중절모, 가면무도회가 열리는 환상적인 공간",
      imagePath: "burrow_ballroom.png",
      type: BurrowType.special,
      specialReward: "파티 레시피 템플릿 해제",
    ),

    BurrowMilestone(
      level: 7,
      requiredRecipes: 70,
      title: "♨️ 지하 온천탕",
      subtitle: "휴식의 공간",
      description: "요리 후 피로를 풀 수 있는 따뜻한 온천",
      imagePath: "burrow_hot_spring.png",
      type: BurrowType.special,
      specialReward: "힐링 레시피 컬렉션",
    ),

    BurrowMilestone(
      level: 8,
      requiredRecipes: 100,
      title: "🎼 지하 음악회장",
      subtitle: "토끼 오케스트라",
      description: "요리와 음악이 어우러지는 예술의 공간",
      imagePath: "burrow_orchestra.png",
      type: BurrowType.legendary,
      specialReward: "음악과 어울리는 레시피",
    ),

    BurrowMilestone(
      level: 9,
      requiredRecipes: 150,
      title: "⚗️ 연금술 실험실",
      subtitle: "요리 연구소",
      description: "새로운 레시피를 연구하는 비밀 실험실",
      imagePath: "burrow_alchemy.png",
      type: BurrowType.legendary,
      specialReward: "실험적 레시피 공식",
    ),

    BurrowMilestone(
      level: 10,
      requiredRecipes: 200,
      title: "🍷 파인다이닝",
      subtitle: "최고급 레스토랑",
      description: "미슐랭 급 토끼 레스토랑의 정점",
      imagePath: "burrow_finedining.png",
      type: BurrowType.legendary,
      specialReward: "마스터 셰프 타이틀",
    ),
  ];

  🎨 UI 디자인 개선안

  1. 토끼굴 메인 화면 - 깊이별 섹션 구분

  ┌────────────────────────────┐
  │     🐰 나의 토끼굴 여정      │
  ├────────────────────────────┤
  │                            │
  │ ═══ 성장하는 굴 ═══        │
  │ [1개] 🌱 토끼굴 입구 ✅     │
  │ [3개] 🏠 작은 부엌 ✅       │
  │ [10개] 🍳 레스토랑 ✅       │
  │ [20개] 📚 도서관 🔒         │
  │ [30개] 🏰 대저택 🔒         │
  │                            │
  │ ═══ 특별한 공간 ═══        │
  │ [50개] 💃 무도회장 🔒       │
  │ [70개] ♨️ 온천탕 🔒        │
  │                            │
  │ ═══ 전설의 공간 ═══        │
  │ [100개] 🎼 음악회장 🔒      │
  │ [150개] ⚗️ 실험실 🔒       │
  │ [200개] 🍷 파인다이닝 🔒    │
  │                            │
  │ 현재 진행: 15/20 레시피     │
  │ ████████████░░░░ 75%      │
  └────────────────────────────┘

  2. 달성 팝업 - 테마별 차별화

  // 일반 성장 트랙
  if (milestone.type == BurrowType.growth) {
    // 따뜻한 톤의 축하 메시지
    showGrowthAchievement();
  }

  // 특별 공간 해제
  else if (milestone.type == BurrowType.special) {
    // 화려한 애니메이션과 특별 보상 표시
    showSpecialUnlock();
  }

  // 전설 공간 해제
  else if (milestone.type == BurrowType.legendary) {
    // 장엄한 음악과 함께 최고급 연출
    showLegendaryUnlock();
  }

  🎮 게이미피케이션 강화

  1. 진행 단계별 타이틀 시스템

  String getUserTitle(int recipeCount) {
    if (recipeCount >= 200) return "🍷 미슐랭 토끼 셰프";
    if (recipeCount >= 150) return "⚗️ 요리 연금술사";
    if (recipeCount >= 100) return "🎼 요리 예술가";
    if (recipeCount >= 70) return "♨️ 온천 요리사";
    if (recipeCount >= 50) return "💃 파티 요리사";
    if (recipeCount >= 30) return "🏰 토끼굴 주인";
    if (recipeCount >= 20) return "📚 레시피 수집가";
    if (recipeCount >= 10) return "🍳 주방장 토끼";
    if (recipeCount >= 3) return "🏠 요리하는 토끼";
    if (recipeCount >= 1) return "🌱 새내기 토끼";
    return "🥚 알 토끼";
  }

  2. 특별 공간 미리보기

  // 잠긴 상태에서도 힌트 제공
  Widget buildLockedHint(BurrowMilestone milestone) {
    return Column(
      children: [
        Image.asset('burrow_locked.png', opacity: 0.5),
        Text("${milestone.requiredRecipes}개 달성시 열립니다"),
        Text("힌트: ${milestone.subtitle}",
             style: TextStyle(fontStyle: FontStyle.italic)),
      ],
    );
  }

  📱 홈화면 위젯 - 다음 목표 강조

  ┌────────────────────────────┐
  │ 🐰 토끼굴 여정              │
  │                            │
  │ 현재: 📚 레시피 도서관       │
  │ [████████░░] 15/20         │
  │                            │
  │ 다음 목표: 🏰 거대한 토끼굴  │
  │ "30개까지 15개 남음!"       │
  │                            │
  │ [토끼굴 탐험하기 →]         │
  └────────────────────────────┘

  🔄 진행 상황 저장 구조

  class EnhancedUserProgress {
    final int totalRecipes;
    final List<int> unlockedMilestones;
    final String currentTitle;
    final int nextMilestone;
    final Map<BurrowType, int> typeProgress;
    final DateTime? lastUnlock;
    final List<String> earnedRewards;
  }

  💡 추가 활용 아이디어

  1. 계절별 이벤트
    - 특정 기간에만 열리는 특별 굴
    - 기간 한정 이미지 보상
  2. 연속 기록 보너스
    - 7일 연속 레시피 작성시 특별 굴 미리보기
  3. 친구 공유 기능
    - 달성한 굴 이미지를 SNS 공유
    - 공유시 특별 프레임 제공
  4. 굴 갤러리
    - 달성한 모든 굴 이미지 모아보기
    - 각 굴의 스토리와 추억 기록

  이렇게 11개의 이미지를 활용하면 200개 레시피까지 장기적인 목표를 제공하면서도, 단계별로 성취감을 느낄
   수 있는 풍부한 시스템이 될 것 같습니다!
  ⎿  User rejected Claude's plan:
     ╭─────────────────────────────────────────────────────────────╮
     │ 🐰 확장된 토끼굴 마일스톤 시스템 구현 계획                  │
     │                                                             │
     │ 이미지 활용 (11개)                                          │
     │                                                             │
     │ 성장 트랙 (1-30개)                                          │
     │                                                             │
     │ - 1개: burrow_tiny.png (입구)                               │
     │ - 3개: burrow_small.png (작은 부엌)                         │
     │ - 10개: burrow_medium.png (레스토랑)                        │
     │ - 20개: burrow_study.png (도서관)                           │
     │ - 30개: burrow_large.png (대저택)                           │
     │                                                             │
     │ 특별 공간 (50-200개)                                        │
     │                                                             │
     │ - 50개: burrow_ballroom.png (무도회장)                      │
     │ - 70개: burrow_hot_spring.png (온천탕)                      │
     │ - 100개: burrow_orchestra.png (음악회장)                    │
     │ - 150개: burrow_alchemy.png (실험실)                        │
     │ - 200개: burrow_finedining.png (파인다이닝)                 │
     │                                                             │
     │ 공통                                                        │
     │                                                             │
     │ - burrow_locked.png (잠긴 상태)                             │
     │                                                             │
     │ 구현 내용                                                   │
     │                                                             │
     │ 1. 데이터 모델                                              │
     │                                                             │
     │ - 10단계 마일스톤 (1, 3, 10, 20, 30, 50, 70, 100, 150, 200) │
     │ - BurrowType enum (growth/special/legendary)                │
     │ - 타이틀 시스템 (새내기 토끼 → 미슐랭 토끼 셰프)            │
     │                                                             │
     │ 2. UI 구현                                                  │
     │                                                             │
     │ - 토끼굴 메인 화면 (3개 섹션: 성장/특별/전설)               │
     │ - 타입별 달성 팝업 차별화                                   │
     │ - 홈화면 진행 위젯 (다음 목표 강조)                         │
     │ - 잠긴 상태 힌트 표시                                       │
     │                                                             │
     │ 3. 추가 기능                                                │
     │                                                             │
     │ - 단계별 타이틀 자동 부여                                   │
     │ - 특별 공간 보상 텍스트                                     │
     │ - 갤러리 모드 (달성한 굴 모아보기)                          │
     │                                                             │
     │ 4. 게이미피케이션                                           │
     │                                                             │
     │ - 200개까지 장기 목표                                       │
     │ - 타입별 진행도 추적                                        │
     │ - 미리보기 힌트 시스템                                      │
     │                                                             │
     │ 예상 구현 시간: 18-20시간                                   │
     ╰─────────────────────────────────────────────────────────────╯

> 특별 테마 공간은 레시피 수량 늘리기보다 다른 액션을 통해 오픈되어야하지 않을까? ultra think로 기획해서 
  제게 몇가지 제안해보세요.

✻ Thinking…

  사용자가 특별 테마 공간(무도회장, 온천탕, 음악회장, 실험실, 파인다이닝)을 단순히 레시피 개수가 아닌 다른 
  액션으로 열리게 하고 싶어한다. 이는 더 흥미로운 게이미피케이션이 될 수 있다.

  Ultra think로 다양한 액션 기반 언락 조건을 생각해보자:

  1. 무도회장 - 파티, 기념일 관련
  2. 온천탕 - 휴식, 힐링 관련  
  3. 음악회장 - 예술, 창의성 관련
  4. 실험실 - 실험, 도전 관련
  5. 파인다이닝 - 완벽함, 마스터리 관련

  각 공간의 테마에 맞는 특별한 조건을 생각해보자.

⏺ 🧠 Ultra Think - 특별 테마 공간 언락 조건 재설계

  📊 기본 철학: 양(Quantity) → 질(Quality) + 스토리(Story)

  특별 공간들은 단순 레시피 개수가 아닌, 특별한 경험과 행동으로 열리도록 설계하는 것이 훨씬 의미있을 것
   같습니다.

  ---
  🎯 특별 테마 공간 언락 조건 제안

  1. 💃 무도회장 (burrow_ballroom.png)

  Option A: 기념일 요리사

  조건: 특별한 날 레시피 5개 이상 작성
  - #생일, #기념일, #파티 태그가 있는 레시피
  - 평점 4점 이상
  - 감정: 'happy' 또는 'excited'

  Option B: 사교적 요리사

  조건: 누군가를 위한 요리 10개
  - 감정 스토리에 "친구", "가족", "연인" 등 언급
  - 다양한 사람들을 위한 요리 (최소 3명 이상)

  Option C: 주말 파티 호스트

  조건: 주말(금토일)에 작성한 레시피 7개
  - 연속 3주 동안 주말 레시피 작성
  - "파티", "모임" 관련 태그

  ---
  2. ♨️ 온천탕 (burrow_hot_spring.png)

  Option A: 힐링 요리사

  조건: 위로의 레시피 마스터
  - 'sad', 'tired', 'nostalgic' 감정 레시피 각 3개씩
  - 감정 스토리에 "위로", "힐링", "휴식" 키워드

  Option B: 야식 달인

  조건: 밤 10시 이후 작성한 레시피 5개
  - 야식, 간단한 요리 위주
  - "피로 회복" 관련 스토리

  Option C: 자기 관리 전문가

  조건: 7일 연속 레시피 작성 (일주일 챌린지)
  - 매일 다른 감정으로 작성
  - 자기 자신을 위한 요리

  ---
  3. 🎼 음악회장 (burrow_orchestra.png)

  Option A: 감정 마에스트로

  조건: 8가지 감정 컬렉션 완성
  - 모든 감정(Mood)으로 최소 1개씩 레시피
  - 각 레시피 평점 3점 이상

  Option B: 리듬 요리사

  조건: 규칙적인 작성 패턴
  - 3일 간격으로 정확히 5번 작성
  - 또는 매주 같은 요일 4주 연속

  Option C: 하모니 크리에이터

  조건: 조화로운 레시피 세트
  - 전채-메인-디저트 완성 (3개 세트)
  - 같은 날 또는 연속 3일 내 작성

  ---
  4. ⚗️ 실험실 (burrow_alchemy.png)

  Option A: 도전적 요리사

  조건: 실패와 재도전
  - 평점 2점 이하 레시피 3개 작성 후
  - 같은 요리 리메이크하여 4점 이상 달성

  Option B: 창의적 실험가

  조건: 독특한 조합 시도
  - 일반적이지 않은 재료 조합 5개
  - AI 분석에서 "독특한" 평가 받기

  Option C: 레시피 연구원

  조건: 같은 재료, 다른 요리
  - 동일한 주재료로 3가지 다른 요리
  - 각각 다른 조리법 사용

  ---
  5. 🍷 파인다이닝 (burrow_finedining.png)

  Option A: 완벽주의자

  조건: 퍼펙트 컬렉션
  - 평점 5점 레시피 10개
  - 연속 5개 레시피 모두 5점

  Option B: 미식가

  조건: 다양한 요리 경험
  - 5개 이상의 다른 요리 카테고리
  - 각 카테고리별 대표 요리 완성

  Option C: 마스터 셰프

  조건: 종합 마스터리
  - 기본 트랙 5단계 모두 달성
  - 총 레시피 50개 이상
  - 평균 평점 4.0 이상

  ---
  🎮 언락 시스템 구현 방식

  1. 진행 상황 힌트 시스템

  class SpecialRoomProgress {
    // 무도회장 진행도
    int partyRecipes = 0;  // 현재 2/5

    // 온천탕 진행도  
    int healingRecipes = 0; // 현재 3/7

    // 실시간 힌트 표시
    String getHint(String roomType) {
      return switch(roomType) {
        'ballroom' => "파티 레시피 ${partyRecipes}/5",
        'hotspring' => "힐링 레시피 ${healingRecipes}/7",
        // ...
      };
    }
  }

  2. 도전 과제 UI

  ┌────────────────────────────┐
  │ 🎯 특별 공간 도전 과제       │
  ├────────────────────────────┤
  │                            │
  │ 💃 무도회장 열기            │
  │ "기념일 요리 5개 만들기"     │
  │ [███░░░░░] 3/5             │
  │                            │
  │ ♨️ 온천탕 열기             │
  │ "7일 연속 요리 도전"        │
  │ [████████] 7/7 ✅ 달성!    │
  │                            │
  │ 🎼 음악회장 열기            │
  │ "8가지 감정 컬렉션"         │
  │ [██████░░] 6/8             │
  └────────────────────────────┘

  3. 비밀 조건 시스템

  // 일부 조건은 숨겨두고 달성시 서프라이즈
  class SecretUnlock {
    bool checkSurprise(Recipe recipe) {
      // 크리스마스에 작성한 레시피
      if (recipe.createdAt.month == 12 &&
          recipe.createdAt.day == 25) {
        unlockSpecialRoom('christmas_special');
        return true;
      }

      // 새벽 3시에 작성한 레시피
      if (recipe.createdAt.hour == 3) {
        incrementNightOwlCounter();
      }
    }
  }

  ---
  🌟 추천 조합

  균형잡힌 난이도 구성

  쉬움 → 어려움

  1. 무도회장: 기념일 요리 5개 (쉬움)
  2. 온천탕: 7일 연속 작성 (중간)
  3. 음악회장: 8가지 감정 완성 (중간)
  4. 실험실: 재도전 성공 3개 (어려움)
  5. 파인다이닝: 연속 5개 만점 (매우 어려움)

  스토리 연결성

  1단계: 성장 (기본 굴 확장)
     ↓
  2단계: 사교 (무도회장 - 타인과 나눔)
     ↓
  3단계: 휴식 (온천탕 - 자기 돌봄)
     ↓
  4단계: 예술 (음악회장 - 감정 표현)
     ↓
  5단계: 도전 (실험실 - 새로운 시도)
     ↓
  6단계: 완성 (파인다이닝 - 마스터리)

  ---
  💡 구현 우선순위 제안

  Phase 1: 핵심 3개만 먼저

  1. 무도회장 - 기념일 요리 5개
  2. 온천탕 - 7일 연속 작성
  3. 음악회장 - 8가지 감정 컬렉션

  Phase 2: 확장 (나중에 추가)

  4. 실험실 - 재도전 시스템
  5. 파인다이닝 - 종합 마스터리

  이렇게 하면 단순 개수가 아닌 의미있는 행동과 경험으로 특별 공간이 열리게 되어, 더욱 재미있고 성취감
  있는 시스템이 될 것 같습니다!

✻ Thinking…

  사용자가 특별 테마 공간들을 레시피 개수가 아닌 다른 액션으로 열리게 하고 싶어한다. 내가 여러 옵션을 
  제안했는데, 이제 사용자의 선택을 기다려야 한다. 

  Plan mode가 활성화되어 있으니 ExitPlanMode를 호출해서 최종 계획을 제시해야 할까? 아니면 사용자가 먼저 
  어떤 언락 조건을 선호하는지 답변을 기다려야 할까?

  사용자가 "몇가지 제안해보세요"라고 했으니 제안은 완료했고, 이제 사용자의 피드백을 기다리는 것이 맞는 것 
  같다.

⏺ 어떤 언락 조건들이 마음에 드시나요? 각 특별 공간마다 3개씩 옵션을 제안했는데, 선호하시는 방식을
  알려주시면 그에 맞춰 구현 계획을 세우겠습니다.

  또는 제가 추천드린 균형잡힌 난이도 구성으로 진행하실 수도 있습니다:
  - 무도회장: 기념일 요리 5개 (쉬움)
  - 온천탕: 7일 연속 작성 (중간)
  - 음악회장: 8가지 감정 완성 (중간)
  - 실험실: 재도전 성공 3개 (어려움)
  - 파인다이닝: 연속 5개 만점 (매우 어려움)

> 내가 옵션을 줄게. 난이도 구성보다는 예기치 못할 때 열리는 걸로 하면 좋겠어. 내가 선택한 옵션들 정리해서
   정교화해봐. ultra think로 기획해

  ---
    🎯 특별 테마 공간 언락 조건 제안

    1. 💃 무도회장 (burrow_ballroom.png) [답변: 옵션 B]

    Option A: 기념일 요리사

    조건: 특별한 날 레시피 5개 이상 작성
    - #생일, #기념일, #파티 태그가 있는 레시피
    - 평점 4점 이상
    - 감정: 'happy' 또는 'excited'

    Option B: 사교적 요리사

    조건: 누군가를 위한 요리 10개
    - 감정 스토리에 "친구", "가족", "연인" 등 언급
    - 다양한 사람들을 위한 요리 (최소 3명 이상)

    Option C: 주말 파티 호스트

    조건: 주말(금토일)에 작성한 레시피 7개
    - 연속 3주 동안 주말 레시피 작성
    - "파티", "모임" 관련 태그

    ---
    2. ♨️ 온천탕 (burrow_hot_spring.png) [답변: 옵션 A]

    Option A: 힐링 요리사

    조건: 위로의 레시피 마스터
    - 'sad', 'tired', 'nostalgic' 감정 레시피 각 3개씩
    - 감정 스토리에 "위로", "힐링", "휴식" 키워드

    Option B: 야식 달인

    조건: 밤 10시 이후 작성한 레시피 5개
    - 야식, 간단한 요리 위주
    - "피로 회복" 관련 스토리

    Option C: 자기 관리 전문가

    조건: 7일 연속 레시피 작성 (일주일 챌린지)
    - 매일 다른 감정으로 작성
    - 자기 자신을 위한 요리

    ---
    3. 🎼 음악회장 (burrow_orchestra.png) [답변: 옵션 A]

    Option A: 감정 마에스트로

    조건: 8가지 감정 컬렉션 완성
    - 모든 감정(Mood)으로 최소 1개씩 레시피
    - 각 레시피 평점 3점 이상

    Option B: 리듬 요리사

    조건: 규칙적인 작성 패턴
    - 3일 간격으로 정확히 5번 작성
    - 또는 매주 같은 요일 4주 연속

    Option C: 하모니 크리에이터

    조건: 조화로운 레시피 세트
    - 전채-메인-디저트 완성 (3개 세트)
    - 같은 날 또는 연속 3일 내 작성

    ---
    4. ⚗️ 실험실 (burrow_alchemy.png) [답변: 옵션 A]

    Option A: 도전적 요리사

    조건: 실패와 재도전
    - 평점 2점 이하 레시피 3개 작성 후
    - 같은 요리 리메이크하여 4점 이상 달성

    Option B: 창의적 실험가

    조건: 독특한 조합 시도
    - 일반적이지 않은 재료 조합 5개
    - AI 분석에서 "독특한" 평가 받기

    Option C: 레시피 연구원

    조건: 같은 재료, 다른 요리
    - 동일한 주재료로 3가지 다른 요리
    - 각각 다른 조리법 사용

    ---
    5. 🍷 파인다이닝 (burrow_finedining.png) [답변: 옵션 A, 평점 만점 레시피 10개]

    Option A: 완벽주의자

    조건: 퍼펙트 컬렉션
    - 평점 5점 레시피 10개
    - 연속 5개 레시피 모두 5점

    Option B: 미식가

    조건: 다양한 요리 경험
    - 5개 이상의 다른 요리 카테고리
    - 각 카테고리별 대표 요리 완성

    Option C: 마스터 셰프

    조건: 종합 마스터리
    - 기본 트랙 5단계 모두 달성
    - 총 레시피 50개 이상
    - 평균 평점 4.0 이상

✻ Thinking…

  사용자가 선택한 옵션들:
  1. 무도회장 - Option B: 사교적 요리사 (누군가를 위한 요리 10개)
  2. 온천탕 - Option A: 힐링 요리사 (위로의 레시피 마스터)
  3. 음악회장 - Option A: 감정 마에스트로 (8가지 감정 컬렉션)
  4. 실험실 - Option A: 도전적 요리사 (실패와 재도전)
  5. 파인다이닝 - Option A: 완벽주의자 (평점 5점 레시피 10개)

  예기치 못할 때 열리는 것으로 하고 싶다고 했으니, 조건 달성을 숨겨두고 갑자기 열리는 서프라이즈 형태로 
  기획해야겠다.

⏺ 🧠 Ultra Think - 예기치 못한 토끼굴 특별 공간 시스템

  🎭 핵심 컨셉: "숨겨진 조건, 예상치 못한 보상"

  사용자가 특별히 의도하지 않고 자연스럽게 요리하다가 갑자기 특별 공간이 열리는 서프라이즈 경험을
  제공합니다.

  ---
  🗝️ 선택된 특별 공간 언락 조건 정교화

  1. 💃 무도회장 - "사교적 요리사"

  숨겨진 조건 체크

  class BallroomUnlock {
    // 백그라운드에서 조용히 추적
    Set<String> peopleCooked = {};  // 요리한 대상들
    int totalSocialRecipes = 0;

    bool checkUnlock(Recipe recipe) {
      // 감정 스토리 자연어 분석
      final keywords = ['친구', '가족', '엄마', '아빠', '동생', '언니',
                       '오빠', '누나', '할머니', '할아버지', '연인',
                       '애인', '남편', '아내', '동료', '선배', '후배'];

      for (String keyword in keywords) {
        if (recipe.emotionalStory.contains(keyword)) {
          totalSocialRecipes++;
          peopleCooked.add(keyword);

          // 조건 충족 체크 (10개 & 3명 이상)
          if (totalSocialRecipes >= 10 && peopleCooked.length >= 3) {
            return true;  // 🎉 서프라이즈!
          }
        }
      }
      return false;
    }
  }

  언락 순간 연출

  갑자기 화면 전환 →
  "어라? 토끼굴에 새로운 공간이...!" →
  무도회장 이미지 서서히 나타남 →
  "당신은 사랑하는 사람들을 위해 요리하는
   진정한 사교적 요리사입니다!"

  ---
  2. ♨️ 온천탕 - "힐링 요리사"

  숨겨진 조건 체크

  class HotSpringUnlock {
    Map<Mood, int> healingMoods = {
      Mood.sad: 0,
      Mood.tired: 0,
      Mood.nostalgic: 0,
    };

    bool checkUnlock(Recipe recipe) {
      // 힐링 감정 카운트
      if (healingMoods.containsKey(recipe.mood)) {
        healingMoods[recipe.mood] = healingMoods[recipe.mood]! + 1;
      }

      // 추가 키워드 보너스
      final healingWords = ['위로', '힐링', '휴식', '편안', '따뜻'];
      bool hasHealingWord = healingWords.any(
        (word) => recipe.emotionalStory.contains(word)
      );

      // 각 감정 3개씩 달성 체크
      if (healingMoods[Mood.sad]! >= 3 &&
          healingMoods[Mood.tired]! >= 3 &&
          healingMoods[Mood.nostalgic]! >= 3) {
        return true;  // 🎉 온천탕 오픈!
      }
      return false;
    }
  }

  언락 순간 연출

  저녁 피로한 날 레시피 작성 완료 →
  "따뜻한 김이 피어오르는 것 같은데..." →
  온천탕 이미지 페이드인 →
  "힘든 감정들을 요리로 치유하는 당신,
   특별한 온천탕에서 쉬어가세요"

  ---
  3. 🎼 음악회장 - "감정 마에스트로"

  숨겨진 조건 체크

  class OrchestraUnlock {
    Set<Mood> collectedMoods = {};
    Map<Mood, int> moodRatings = {};

    bool checkUnlock(Recipe recipe) {
      // 평점 3점 이상인 감정만 수집
      if (recipe.rating != null && recipe.rating! >= 3) {
        collectedMoods.add(recipe.mood);
        moodRatings[recipe.mood] = recipe.rating!;
      }

      // 8가지 감정 모두 수집했는지 체크
      if (collectedMoods.length == Mood.values.length) {
        // 평균 평점도 체크 (추가 조건)
        double avgRating = moodRatings.values.reduce((a,b) => a+b) / 8;
        if (avgRating >= 3.0) {
          return true;  // 🎉 오케스트라 등장!
        }
      }
      return false;
    }

    // 진행 상황 (숨겨진 힌트)
    String getHiddenHint() {
      return "다양한 감정을 표현중... ${collectedMoods.length}/8";
    }
  }

  언락 순간 연출

  마지막 감정 레시피 작성 →
  "모든 감정의 하모니가 완성되었습니다!" →
  음악 소리와 함께 음악회장 등장 →
  "8가지 감정을 모두 경험한 당신은
   진정한 감정의 마에스트로입니다"

  ---
  4. ⚗️ 실험실 - "도전적 요리사"

  숨겨진 조건 체크

  class AlchemyUnlock {
    Map<String, List<int>> recipeAttempts = {};  // 요리명: [평점들]
    int successfulRemakes = 0;

    bool checkUnlock(Recipe recipe) {
      String simplifiedTitle = recipe.title.replaceAll(' ', '').toLowerCase();

      // 같은 요리 추적
      if (!recipeAttempts.containsKey(simplifiedTitle)) {
        recipeAttempts[simplifiedTitle] = [];
      }
      recipeAttempts[simplifiedTitle]!.add(recipe.rating ?? 3);

      // 실패 → 성공 패턴 체크
      var attempts = recipeAttempts[simplifiedTitle]!;
      if (attempts.length >= 2) {
        // 첫 시도가 2점 이하, 재시도가 4점 이상
        if (attempts.first <= 2 && attempts.last >= 4) {
          successfulRemakes++;

          if (successfulRemakes >= 3) {
            return true;  // 🎉 실험실 개방!
          }
        }
      }
      return false;
    }
  }

  언락 순간 연출

  실패했던 요리 재도전 성공 →
  "실패는 성공의 어머니!" →
  실험실 이미지와 함께 연기 효과 →
  "도전을 두려워하지 않는 당신에게
   비밀 실험실을 공개합니다"

  ---
  5. 🍷 파인다이닝 - "완벽주의자"

  숨겨진 조건 체크

  class FineDiningUnlock {
    List<Recipe> perfectRecipes = [];
    int consecutivePerfect = 0;
    int maxConsecutive = 0;

    bool checkUnlock(Recipe recipe) {
      if (recipe.rating == 5) {
        perfectRecipes.add(recipe);
        consecutivePerfect++;
        maxConsecutive = max(maxConsecutive, consecutivePerfect);

        // 총 10개 만점 달성
        if (perfectRecipes.length >= 10) {
          return true;  // 🎉 파인다이닝 오픈!
        }
      } else {
        consecutivePerfect = 0;  // 연속 리셋
      }
      return false;
    }

    // 보너스: 연속 5개 달성시 즉시 오픈
    bool checkBonusUnlock() {
      return maxConsecutive >= 5;
    }
  }

  언락 순간 연출

  10번째 만점 레시피 달성 →
  "완벽한 요리의 경지에 도달했습니다" →
  고급스러운 음악과 함께 파인다이닝 등장 →
  "미슐랭 급 토끼 셰프님,
   최고급 레스토랑에 초대합니다"

  ---
  🎮 시스템 구현 전략

  1. 진행 상황 숨기기

  class HiddenProgressTracker {
    // 사용자에게 보이지 않는 진행 상황
    Map<String, dynamic> hiddenStats = {
      'social_recipes': 0,
      'healing_moods': {},
      'emotion_collection': Set<Mood>(),
      'remake_success': 0,
      'perfect_count': 0,
    };

    // 가끔씩 미묘한 힌트만 제공
    String getSubtleHint() {
      if (Random().nextInt(10) == 0) {  // 10% 확률
        return _generateHint();
      }
      return "";
    }

    String _generateHint() {
      // 예: "요즘 다양한 감정을 표현하고 있네요..."
      // 예: "누군가를 위한 요리가 늘어나고 있어요..."
      // 직접적이지 않은 힌트만
    }
  }

  2. 서프라이즈 언락 알림

  class SurpriseUnlockDialog extends StatefulWidget {
    final String roomType;
    final String imagePath;

    @override
    Widget build(BuildContext context) {
      return AnimatedContainer(
        // 1. 화면 어두워짐
        // 2. 신비로운 효과음
        // 3. 이미지 서서히 나타남
        // 4. 축하 메시지
        // 5. "토끼굴 탐험하기" 버튼
      );
    }
  }

  3. 토끼굴 화면 구성

  ┌────────────────────────────┐
  │     🐰 나의 토끼굴          │
  ├────────────────────────────┤
  │                            │
  │ ═══ 성장하는 굴 ═══        │
  │ [1] 입구 ✅                │
  │ [3] 작은 부엌 ✅            │
  │ [10] 레스토랑 ✅            │
  │ [20] 도서관 🔒              │
  │ [30] 대저택 🔒              │
  │                            │
  │ ═══ 특별한 공간 ═══        │
  │ [?] ??? 🔒                 │
  │ [?] ??? 🔒                 │
  │ [?] ??? 🔒                 │
  │ [?] ??? 🔒                 │
  │ [?] ??? 🔒                 │
  │                            │
  │ 💡 특별 공간은 예상치 못한   │
  │    순간에 열립니다          │
  └────────────────────────────┘

  4. 데이터 저장 구조

  class BurrowProgress {
    // 기본 트랙 (보임)
    List<int> unlockedBasicRooms = [];

    // 특별 공간 (숨김)
    Map<String, bool> specialRooms = {
      'ballroom': false,
      'hotspring': false,
      'orchestra': false,
      'alchemy': false,
      'finedining': false,
    };

    // 숨겨진 진행 상황
    Map<String, dynamic> hiddenProgress = {};

    // 언락 날짜 기록
    Map<String, DateTime> unlockDates = {};
  }

  ---
  💡 추가 서프라이즈 요소

  1. 더블 언락 보너스

  // 같은 날 2개 특별 공간 언락시
  if (unlockedToday >= 2) {
    showSpecialBonus("토끼굴 마스터!");
  }

  2. 시즌 이벤트

  // 특정 계절/날짜에만 열리는 임시 공간
  if (DateTime.now().month == 12 && DateTime.now().day == 25) {
    temporaryUnlock('christmas_special');
  }

  3. 연쇄 언락

  // 특정 조합 달성시 추가 공간
  if (hasUnlocked(['ballroom', 'orchestra'])) {
    unlock('grand_theater');  // 대극장
  }

  이렇게 구현하면 사용자는 평소처럼 레시피를 작성하다가 갑자기 특별 공간이 열리는 놀라운 경험을 하게 될
   것입니다!
  ⎿  User rejected Claude's plan:
     ╭──────────────────────────────────────────────────╮
     │ 🐰 예기치 못한 토끼굴 특별 공간 시스템 구현 계획 │
     │                                                  │
     │ 선택된 언락 조건                                 │
     │                                                  │
     │ 기본 성장 트랙 (레시피 개수)                     │
     │                                                  │
     │ 1. 1개 → 토끼굴 입구                             │
     │ 2. 3개 → 작은 부엌                               │
     │ 3. 10개 → 레스토랑                               │
     │ 4. 20개 → 도서관                                 │
     │ 5. 30개 → 대저택                                 │
     │                                                  │
     │ 특별 공간 (숨겨진 조건)                          │
     │                                                  │
     │ 1. 무도회장: 누군가를 위한 요리 10개 (3명 이상)  │
     │ 2. 온천탕: sad/tired/nostalgic 각 3개씩          │
     │ 3. 음악회장: 8가지 감정 컬렉션 완성              │
     │ 4. 실험실: 실패 후 재도전 성공 3회               │
     │ 5. 파인다이닝: 평점 5점 레시피 10개              │
     │                                                  │
     │ 구현 내용                                        │
     │                                                  │
     │ 1. 데이터 모델                                   │
     │                                                  │
     │ - BurrowMilestone 모델 (기본 + 특별 공간)        │
     │ - HiddenProgressTracker (숨겨진 진행 추적)       │
     │ - 조건 체크 로직 (백그라운드 자동 체크)          │
     │                                                  │
     │ 2. 언락 시스템                                   │
     │                                                  │
     │ - RecipeProvider.addRecipe()에서 자동 체크       │
     │ - 조건 달성시 서프라이즈 팝업                    │
     │ - 진행 상황은 숨김 (힌트만 가끔)                 │
     │                                                  │
     │ 3. UI 구현                                       │
     │                                                  │
     │ - 토끼굴 화면 (특별 공간은 ???로 표시)           │
     │ - 서프라이즈 언락 애니메이션                     │
     │ - 달성 후 이미지 갤러리                          │
     │                                                  │
     │ 4. 사용자 경험                                   │
     │                                                  │
     │ - 예상치 못한 순간에 공간 오픈                   │
     │ - 미묘한 힌트만 제공                             │
     │ - 달성 조건은 언락 후에만 공개                   │
     │                                                  │
     │ 예상 시간: 20-25시간 (복잡도 증가)               │
     ╰──────────────────────────────────────────────────╯

> /export unlock-planing.txt
  ⎿  Conversation exported to: unlock-planing.txt

> @Recipesoup/ 에 있는 txt 파일들을 폴더링하고 싶습니다. 앞으로 /export 해서 만드는 txt 파일도 모두 같은 
  폴더에 넣고 싶습니다.  사이드 이펙트나 버그 에러를 고려해서 ultra think로작업하세요.

✻ Thinking…

  사용자가 Recipesoup 프로젝트 내에 있는 txt 파일들을 폴더링하고, 앞으로 /export로 만들어지는 txt 파일들도 
  같은 폴더에 넣고 싶다고 하네요. 

  Ultra think로 사이드 이펙트와 버그를 고려해서 작업해야 합니다.

  먼저 현재 상황을 파악해보겠습니다:
  1. 현재 txt 파일들이 어디에 있는지 확인
  2. 적절한 폴더 구조 제안
  3. 사이드 이펙트 고려사항
  4. 구현 방법

  Plan mode가 활성화되어 있으므로 파일을 수정하거나 변경하면 안 되고, 계획만 세워야 합니다.

⏺ 🧠 Ultra Think - txt 파일 폴더링 계획

  📊 현재 상황 분석

⏺ Search(pattern: "*.txt")
  ⎿  Found 14 files (ctrl+r to expand)

✻ Thinking…

  현재 Recipesoup 폴더에 다양한 txt 파일들이 있네요:

  1. API 키 파일: recipesoup-openai-apikey.txt
  2. 문서 파일들: q&a.txt, 가이드.txt  
  3. Claude 대화 내용 파일들: 2025-08-31, 2025-09-01, 2025-09-02~ 등
  4. 특정 작업 관련 파일들: wiget-fix-0902.txt, burrow-progress.txt, burrow-img.txt, open-option.txt

  이것들을 정리하기 위해 폴더 구조를 만들어야 하는데, 몇 가지 고려사항이 있습니다:

  사이드 이펙트 고려사항:
  1. API 키 파일의 보안성 - 이건 아마 숨겨져야 할 파일
  2. 기존 코드나 설정에서 이 txt 파일들을 참조하고 있을 가능성
  3. Git 추적 여부 - .gitignore 설정 확인 필요
  4. 상대 경로로 참조되고 있을 가능성

  Ultra think로 접근해보겠습니다.

⏺ 🗂️ 제안하는 폴더 구조

  /Users/hanabi/Downloads/practice/Recipesoup/
  ├── recipesoup/                    # 메인 앱 폴더
  ├── docs/                         # 📁 새로 생성할 폴더
  │   ├── api-keys/                # 🔒 보안 파일들
  │   │   └── recipesoup-openai-apikey.txt
  │   ├── guides/                  # 📖 문서들
  │   │   ├── q&a.txt
  │   │   └── 가이드.txt
  │   ├── conversations/           # 💬 Claude 대화 기록들
  │   │   ├── 2025-08-31-this-session-is-being-continued-from-a-previous-co.txt
  │   │   ├── 2025-09-01-this-session-is-being-continued-from-a-previous-co.txt
  │   │   ├── 2025-09-01-this-session-is-being-continued-from-a-previous-co-CODE-CLEANING.txt
  │   │   ├── 2025-09-02-this-session-is-being-continued-from-a-previous-co-plus-screenshot-gpt.txt
  │   │   ├── 2025-09-02-this-session-is-being-continued-from-a-previous-co-screenshot-fix.txt
  │   │   ├── 2025-09-02-this-session-is-being-continued-from-a-previous-co-burrow-milestone.txt
  │   │   └── 2025-09-02-this-session-is-being-continued-from-a-previous-co-burrow-ver1.txt
  │   └── work-notes/              # 🔧 작업 노트들
  │       ├── wiget-fix-0902.txt
  │       ├── burrow-progress.txt
  │       ├── burrow-img.txt
  │       ├── open-option.txt
  │       └── unlock-planing.txt   # 방금 생성된 파일
  └── .gitignore                   # Git 설정 확인 필요

  ---
  ⚠️ Ultra Think - 사이드 이펙트 분석

  1. 코드 참조 확인

⏺ Search(pattern: "recipesoup-openai-apikey\.txt")
  ⎿  Found 2 files (ctrl+r to expand)

✻ Thinking…

  PROGRESS.md와 NOTE.md에서 API 키 파일을 참조하고 있다는 것을 확인했습니다. 이것들을 확인해서 참조 경로를 
  업데이트해야 할 것 같습니다.

⏺ Search(pattern: "\.txt", glob: "**/*.md")
  ⎿  Found 2 files (ctrl+r to expand)

✻ Thinking…

  이제 각 파일에서 어떤 텍스트 파일을 참조하고 있는지 확인해보겠습니다.

⏺ Search(pattern: "\.txt", glob: "**/*.md", output_mode: "content")
  ⎿  Found 2 lines (ctrl+r to expand)

✻ Thinking…

  좋습니다. PROGRESS.md와 NOTE.md에서 API 키 파일을 참조하고 있는 것을 확인했습니다. 이 파일들을 이동할 때 
  이 참조들도 업데이트해야 합니다.

  이제 .gitignore 파일을 확인해서 어떤 파일들이 Git 추적에서 제외되어야 하는지 확인해보겠습니다.

⏺ Read(.gitignore)
  ⎿  Read 103 lines (ctrl+r to expand)

✻ Thinking…

  .gitignore에서 API 키 파일이나 txt 파일에 대한 특별한 설정은 보이지 않네요. 하지만 보안을 위해 API 키 
  파일은 .gitignore에 추가해야 할 것 같습니다.

  이제 종합적으로 Ultra Think 분석을 정리해보겠습니다.

⏺ 2. Git 추적 상태 확인

⏺ Bash(cd /Users/hanabi/Downloads/practice/Recipesoup && git status --porcelain | grep ".txt")
  ⎿  ?? 2025-08-31-this-session-is-being-continued-from-a-previous-co.txt              
     ?? 2025-09-01-this-session-is-being-continued-from-a-previous-co-CODE-CLEANING.txt
     ?? 2025-09-01-this-session-is-being-continued-from-a-previous-co.txt
     … +11 lines (ctrl+r to expand)

✻ Thinking…

  모든 txt 파일들이 현재 Git에서 untracked 상태("??" 표시)인 것을 확인했습니다. 이것은 좋은 소식으로, 
  파일을 이동해도 Git 히스토리에 영향을 주지 않을 것입니다.

  이제 종합적으로 Ultra Think 분석을 해보겠습니다.

⏺ ---
  🚨 Ultra Think - 주요 사이드 이펙트 및 위험 요소

  1. 파일 참조 업데이트 필요

  영향받는 파일:
  - PROGRESS.md (line 201)
  - NOTE.md (line 8)

  수정 내용:
  "recipesoup-openai-apikey.txt" → "docs/api-keys/recipesoup-openai-apikey.txt"

  2. 보안 위험

  🔒 API 키 파일 보안성
  - 현재: 루트 디렉토리에 노출
  - 문제: .gitignore에 명시되지 않음
  - 해결: docs/api-keys/ 폴더 + .gitignore 추가

  3. /export 명령어 영향

  /export 명령어가 txt 파일을 생성하는 위치:
  현재: /Users/hanabi/Downloads/practice/Recipesoup/
  변경 후: /Users/hanabi/Downloads/practice/Recipesoup/docs/conversations/

  ⚠️ /export 명령어의 기본 경로 변경 불가능 (Claude 시스템 제약)
  → 생성 후 수동으로 이동해야 함

  4. 폴더 권한 및 접근성

  새로 생성될 폴더들의 권한 확인 필요:
  - docs/ (755)
  - docs/api-keys/ (700 - 더 제한적)
  - docs/conversations/ (755)
  - docs/guides/ (755)
  - docs/work-notes/ (755)

  ---
  📋 구체적 실행 계획

  Phase 1: 폴더 구조 생성

  mkdir -p docs/{api-keys,guides,conversations,work-notes}
  chmod 700 docs/api-keys  # API 키 폴더 보안 강화

  Phase 2: 파일 분류 및 이동

  # API 키 파일
  mv recipesoup-openai-apikey.txt docs/api-keys/

  # 가이드 문서
  mv q&a.txt docs/guides/
  mv 가이드.txt docs/guides/

  # Claude 대화 기록들
  mv 2025-08-31-this-session-is-being-continued-from-a-previous-co.txt docs/conversations/
  mv 2025-09-01-this-session-is-being-continued-from-a-previous-co.txt docs/conversations/
  mv 2025-09-01-this-session-is-being-continued-from-a-previous-co-CODE-CLEANING.txt
  docs/conversations/
  mv 2025-09-02-this-session-is-being-continued-from-a-previous-co-plus-screenshot-gpt.txt
  docs/conversations/
  mv 2025-09-02-this-session-is-being-continued-from-a-previous-co-screenshot-fix.txt
  docs/conversations/
  mv 2025-09-02-this-session-is-being-continued-from-a-previous-co-burrow-milestone.txt
  docs/conversations/
  mv 2025-09-02-this-session-is-being-continued-from-a-previous-co-burrow-ver1.txt docs/conversations/

  # 작업 노트들
  mv wiget-fix-0902.txt docs/work-notes/
  mv burrow-progress.txt docs/work-notes/
  mv burrow-img.txt docs/work-notes/
  mv open-option.txt docs/work-notes/

  Phase 3: 참조 파일 업데이트

  PROGRESS.md와 NOTE.md에서:
  "recipesoup-openai-apikey.txt" → "docs/api-keys/recipesoup-openai-apikey.txt"

  Phase 4: .gitignore 업데이트

  echo "" >> .gitignore
  echo "# API Keys and sensitive files" >> .gitignore
  echo "docs/api-keys/" >> .gitignore
  echo "" >> .gitignore
  echo "# Work notes and conversation exports" >> .gitignore
  echo "docs/conversations/" >> .gitignore
  echo "docs/work-notes/" >> .gitignore

  Phase 5: 향후 /export 파일 관리

  # 향후 생성되는 export 파일들을 위한 자동화 스크립트 (선택사항)
  # move_exports.sh
  #!/bin/bash
  mv *.txt docs/conversations/ 2>/dev/null
  echo "Export files moved to docs/conversations/"

  ---
  💡 추가 개선사항

  1. README 추가

  docs/README.md 생성하여 폴더 구조 설명:
  - api-keys/: API 키 등 보안 파일
  - guides/: 프로젝트 가이드 문서
  - conversations/: Claude 대화 내역
  - work-notes/: 작업 노트 및 임시 파일

  2. 향후 /export 자동화

  # .bashrc 또는 .zshrc에 alias 추가
  alias move-exports='mv /Users/hanabi/Downloads/practice/Recipesoup/*.txt 
  /Users/hanabi/Downloads/practice/Recipesoup/docs/conversations/ 2>/dev/null; echo "Exports moved to 
  docs/conversations/"'

  3. 백업 전략

  # 이동 전 백업
  tar -czf docs_backup_$(date +%Y%m%d_%H%M%S).tar.gz *.txt

  ---
  ✅ 최종 체크리스트

  - 폴더 구조 생성
  - 파일 분류 및 이동
  - 참조 경로 업데이트 (PROGRESS.md, NOTE.md)
  - .gitignore 업데이트
  - 폴더 권한 설정
  - docs/README.md 생성
  - 백업 생성
  - Git 상태 확인

  이렇게 구현하면 깔끔한 폴더 구조와 보안 강화, 그리고 향후 유지보수 용이성을 모두 확보할 수 있습니다!
  ⎿  User rejected Claude's plan:
     ╭────────────────────────────────────────────────────────╮
     │ 📁 txt 파일 폴더링 및 관리 시스템 구축 계획            │
     │                                                        │
     │ 제안하는 폴더 구조                                     │
     │                                                        │
     │ docs/                                                  │
     │ ├── api-keys/           # 🔒 보안 파일 (chmod 700)     │
     │ ├── guides/             # 📖 문서 파일                 │
     │ ├── conversations/      # 💬 Claude 대화 기록          │
     │ └── work-notes/         # 🔧 작업 노트                 │
     │                                                        │
     │ 주요 작업 내용                                         │
     │                                                        │
     │ 1. 파일 분류 및 이동                                   │
     │                                                        │
     │ - API 키: docs/api-keys/                               │
     │ - 가이드 문서: docs/guides/                            │
     │ - Claude 대화(2025-xx): docs/conversations/            │
     │ - 작업 노트: docs/work-notes/                          │
     │                                                        │
     │ 2. 참조 경로 업데이트                                  │
     │                                                        │
     │ - PROGRESS.md, NOTE.md에서 API 키 경로 수정            │
     │ - "recipesoup-openai-apikey.txt" → "docs/api-keys/..." │
     │                                                        │
     │ 3. 보안 강화                                           │
     │                                                        │
     │ - .gitignore에 docs/api-keys/ 추가                     │
     │ - API 키 폴더 권한 700으로 제한                        │
     │ - 민감 파일 Git 추적 방지                              │
     │                                                        │
     │ 4. 향후 /export 관리                                   │
     │                                                        │
     │ - 새로운 export 파일 자동 분류 방안                    │
     │ - docs/conversations/로 수동 이동 필요                 │
     │                                                        │
     │ 사이드 이펙트 대응                                     │
     │                                                        │
     │ ✅ Git 상태: 모든 txt 파일이 untracked                  │
     │ ✅ 코드 참조: PROGRESS.md, NOTE.md만 업데이트           │
     │ ✅ 권한 설정: API 키 폴더 보안 강화                     │
     │ ✅ 백업 생성: 이동 전 tar 백업                          │
     │                                                        │
     │ 예상 시간: 30분                                        │
     ╰────────────────────────────────────────────────────────╯

> 개발 시작 전 이 기획을 최종 검수하세요. 에러나 버그 및 사이드 이펙트를 모두 고려하세요. ultra think로 
  검수하십시오. 

  ⏺ 🧠 Ultra Think - 예기치 못한 토끼굴 특별 공간 시스템

    �� 핵심 컨셉: "숨겨진 조건, 예상치 못한 보상"

    사용자가 특별히 의도하지 않고 자연스럽게 요리하다가 갑자기 특별 공간이 열리는 서프라이즈 경험을
    제공합니다.

    ---
    🗝️ 선택된 특별 공간 언락 조건 정교화

    1. 💃 무도회장 - "사교적 요리사"

    숨겨진 조건 체크

    class BallroomUnlock {
      // 백그라운드에서 조용히 추적
      Set<String> peopleCooked = {};  // 요리한 대상들
      int totalSocialRecipes = 0;

      bool checkUnlock(Recipe recipe) {
        // 감정 스토리 자연어 분석
        final keywords = ['친구', '가족', '엄마', '아빠', '동생', '언니',
                         '오빠', '누나', '할머니', '할아버지', '연인',
                         '애인', '남편', '아내', '동료', '선배', '후배'];

        for (String keyword in keywords) {
          if (recipe.emotionalStory.contains(keyword)) {
            totalSocialRecipes++;
            peopleCooked.add(keyword);

            // 조건 충족 체크 (10개 & 3명 이상)
            if (totalSocialRecipes >= 10 && peopleCooked.length >= 3) {
              return true;  // 🎉 서프라이즈!
            }
          }
        }
        return false;
      }
    }

    언락 순간 연출

    갑자기 화면 전환 →
    "어라? 토끼굴에 새로운 공간이...!" →
    무도회장 이미지 서서히 나타남 →
    "당신은 사랑하는 사람들을 위해 요리하는
     진정한 사교적 요리사입니다!"

    ---
    2. ♨️ 온천탕 - "힐링 요리사"

    숨겨진 조건 체크

    class HotSpringUnlock {
      Map<Mood, int> healingMoods = {
        Mood.sad: 0,
        Mood.tired: 0,
        Mood.nostalgic: 0,
      };

      bool checkUnlock(Recipe recipe) {
        // 힐링 감정 카운트
        if (healingMoods.containsKey(recipe.mood)) {
          healingMoods[recipe.mood] = healingMoods[recipe.mood]! + 1;
        }

        // 추가 키워드 보너스
        final healingWords = ['위로', '힐링', '휴식', '편안', '따뜻'];
        bool hasHealingWord = healingWords.any(
          (word) => recipe.emotionalStory.contains(word)
        );

        // 각 감정 3개씩 달성 체크
        if (healingMoods[Mood.sad]! >= 3 &&
            healingMoods[Mood.tired]! >= 3 &&
            healingMoods[Mood.nostalgic]! >= 3) {
          return true;  // 🎉 온천탕 오픈!
        }
        return false;
      }
    }

    언락 순간 연출

    저녁 피로한 날 레시피 작성 완료 →
    "따뜻한 김이 피어오르는 것 같은데..." →
    온천탕 이미지 페이드인 →
    "힘든 감정들을 요리로 치유하는 당신,
     특별한 온천탕에서 쉬어가세요"

    ---
    3. 🎼 음악회장 - "감정 마에스트로"

    숨겨진 조건 체크

    class OrchestraUnlock {
      Set<Mood> collectedMoods = {};
      Map<Mood, int> moodRatings = {};

      bool checkUnlock(Recipe recipe) {
        // 평점 3점 이상인 감정만 수집
        if (recipe.rating != null && recipe.rating! >= 3) {
          collectedMoods.add(recipe.mood);
          moodRatings[recipe.mood] = recipe.rating!;
        }

        // 8가지 감정 모두 수집했는지 체크
        if (collectedMoods.length == Mood.values.length) {
          // 평균 평점도 체크 (추가 조건)
          double avgRating = moodRatings.values.reduce((a,b) => a+b) / 8;
          if (avgRating >= 3.0) {
            return true;  // �� 오케스트라 등장!
          }
        }
        return false;
      }

      // 진행 상황 (숨겨진 힌트)
      String getHiddenHint() {
        return "다양한 감정을 표현중... ${collectedMoods.length}/8";
      }
    }

    언락 순간 연출

    마지막 감정 레시피 작성 →
    "모든 감정의 하모니가 완성되었습니다!" →
    음악 소리와 함께 음악회장 등장 →
    "8가지 감정을 모두 경험한 당신은
     진정한 감정의 마에스트로입니다"

    ---
    4. ⚗️ 실험실 - "도전적 요리사"

    숨겨진 조건 체크

    class AlchemyUnlock {
      Map<String, List<int>> recipeAttempts = {};  // 요리명: [평점들]
      int successfulRemakes = 0;

      bool checkUnlock(Recipe recipe) {
        String simplifiedTitle = recipe.title.replaceAll(' ', '').toLowerCase();

        // 같은 요리 추적
        if (!recipeAttempts.containsKey(simplifiedTitle)) {
          recipeAttempts[simplifiedTitle] = [];
        }
        recipeAttempts[simplifiedTitle]!.add(recipe.rating ?? 3);

        // 실패 → 성공 패턴 체크
        var attempts = recipeAttempts[simplifiedTitle]!;
        if (attempts.length >= 2) {
          // 첫 시도가 2점 이하, 재시도가 4점 이상
          if (attempts.first <= 2 && attempts.last >= 4) {
            successfulRemakes++;

            if (successfulRemakes >= 3) {
              return true;  // 🎉 실험실 개방!
            }
          }
        }
        return false;
      }
    }

    언락 순간 연출

    실패했던 요리 재도전 성공 →
    "실패는 성공의 어머니!" →
    실험실 이미지와 함께 연기 효과 →
    "도전을 두려워하지 않는 당신에게
     비밀 실험실을 공개합니다"

    ---
    5. 🍷 파인다이닝 - "완벽주의자"

    숨겨진 조건 체크

    class FineDiningUnlock {
      List<Recipe> perfectRecipes = [];
      int consecutivePerfect = 0;
      int maxConsecutive = 0;

      bool checkUnlock(Recipe recipe) {
        if (recipe.rating == 5) {
          perfectRecipes.add(recipe);
          consecutivePerfect++;
          maxConsecutive = max(maxConsecutive, consecutivePerfect);

          // 총 10개 만점 달성
          if (perfectRecipes.length >= 10) {
            return true;  // 🎉 파인다이닝 오픈!
          }
        } else {
          consecutivePerfect = 0;  // 연속 리셋
        }
        return false;
      }

      // 보너스: 연속 5개 달성시 즉시 오픈
      bool checkBonusUnlock() {
        return maxConsecutive >= 5;
      }
    }

    언락 순간 연출

    10번째 만점 레시피 달성 →
    "완벽한 요리의 경지에 도달했습니다" →
    고급스러운 음악과 함께 파인다이닝 등장 →
    "미슐랭 급 토끼 셰프님,
     최고급 레스토랑에 초대합니다"

    ---
    🎮 시스템 구현 전략

    1. 진행 상황 숨기기

    class HiddenProgressTracker {
      // 사용자에게 보이지 않는 진행 상황
      Map<String, dynamic> hiddenStats = {
        'social_recipes': 0,
        'healing_moods': {},
        'emotion_collection': Set<Mood>(),
        'remake_success': 0,
        'perfect_count': 0,
      };

      // 가끔씩 미묘한 힌트만 제공
      String getSubtleHint() {
        if (Random().nextInt(10) == 0) {  // 10% 확률
          return _generateHint();
        }
        return "";
      }

      String _generateHint() {
        // 예: "요즘 다양한 감정을 표현하고 있네요..."
        // 예: "누군가를 위한 요리가 늘어나고 있어요..."
        // 직접적이지 않은 힌트만
      }
    }

    2. 서프라이즈 언락 알림

    class SurpriseUnlockDialog extends StatefulWidget {
      final String roomType;
      final String imagePath;

      @override
      Widget build(BuildContext context) {
        return AnimatedContainer(
          // 1. 화면 어두워짐
          // 2. 신비로운 효과음
          // 3. 이미지 서서히 나타남
          // 4. 축하 메시지
          // 5. "토끼굴 탐험하기" 버튼
        );
      }
    }

    3. 토끼굴 화면 구성

    ┌────────────────────────────┐
    │     🐰 나의 토끼굴          │
    ├────────────────────────────┤
    │                            │
    │ ═══ 성장하는 굴 ═══        │
    │ [1] 입구 ✅                │
    │ [3] 작은 부엌 ✅            │
    │ [10] 레스토랑 ✅            │
    │ [20] 도서관 🔒              │
    │ [30] 대저택 🔒              │
    │                            │
    │ ═══ 특별한 공간 ═══        │
    │ [?] ??? 🔒                 │
    │ [?] ??? 🔒                 │
    │ [?] ??? 🔒                 │
    │ [?] ??? 🔒                 │
    │ [?] ??? 🔒                 │
    │                            │
    │ 💡 특별 공간은 예상치 못한   │
    │    순간에 열립니다          │
    └────────────────────────────┘

    4. 데이터 저장 구조

    class BurrowProgress {
      // 기본 트랙 (보임)
      List<int> unlockedBasicRooms = [];

      // 특별 공간 (숨김)
      Map<String, bool> specialRooms = {
        'ballroom': false,
        'hotspring': false,
        'orchestra': false,
        'alchemy': false,
        'finedining': false,
      };

      // 숨겨진 진행 상황
      Map<String, dynamic> hiddenProgress = {};

      // 언락 날짜 기록
      Map<String, DateTime> unlockDates = {};
    }

    ---
    💡 추가 서프라이즈 요소

    1. 더블 언락 보너스

    // 같은 날 2개 특별 공간 언락시
    if (unlockedToday >= 2) {
      showSpecialBonus("토끼굴 마스터!");
    }

    2. 시즌 이벤트

    // 특정 계절/날짜에만 열리는 임시 공간
    if (DateTime.now().month == 12 && DateTime.now().day == 25) {
      temporaryUnlock('christmas_special');
    }

    3. 연쇄 언락

    // 특정 조합 달성시 추가 공간
    if (hasUnlocked(['ballroom', 'orchestra'])) {
      unlock('grand_theater');  // 대극장
    }

    이렇게 구현하면 사용자는 평소처럼 레시피를 작성하다가 갑자기 특별 공간이 열리는 놀라운 경험을 하게 될
     것입니다!
    ⎿  User rejected Claude's plan:
       ╭──────────────────────────────────────────────────╮
       │ 🐰 예기치 못한 토끼굴 특별 공간 시스템 구현 계획 │
       │                                                  │
       │ 선택된 언락 조건                                 │
       │                                                  │
       │ 기본 성장 트랙 (레시피 개수)                     │
       │                                                  │
       │ 1. 1개 → 토끼굴 입구                             │
       │ 2. 3개 → 작은 부엌                               │
       │ 3. 10개 → 레스토랑                               │
       │ 4. 20개 → 도서관                                 │
       │ 5. 30개 → 대저택                                 │
       │                                                  │
       │ 특별 공간 (숨겨진 조건)                          │
       │                                                  │
       │ 1. 무도회장: 누군가를 위한 요리 10개 (3명 이상)  │
       │ 2. 온천탕: sad/tired/nostalgic 각 3개씩          │
       │ 3. 음악회장: 8가지 감정 컬렉션 완성              │
       │ 4. 실험실: 실패 후 재도전 성공 3회               │
       │ 5. 파인다이닝: 평점 5점 레시피 10개              │
       │                                                  │
       │ 구현 내용                                        │
       │                                                  │
       │ 1. 데이터 모델                                   │
       │                                                  │
       │ - BurrowMilestone 모델 (기본 + 특별 공간)        │
       │ - HiddenProgressTracker (숨겨진 진행 추적)       │
       │ - 조건 체크 로직 (백그라운드 자동 체크)          │
       │                                                  │
       │ 2. 언락 시스템                                   │
       │                                                  │
       │ - RecipeProvider.addRecipe()에서 자동 체크       │
       │ - 조건 달성시 서프라이즈 팝업                    │
       │ - 진행 상황은 숨김 (힌트만 가끔)                 │
       │                                                  │
       │ 3. UI 구현                                       │
       │                                                  │
       │ - 토끼굴 화면 (특별 공간은 ???로 표시)           │
       │ - 서프라이즈 언락 애니메이션                     │
       │ - 달성 후 이미지 갤러리                          │
       │                                                  │
       │ 4. 사용자 경험                                   │
       │                                                  │
       │ - 예상치 못한 순간에 공간 오픈                   │
       │ - 미묘한 힌트만 제공                             │
       │ - 달성 조건은 언락 후에만 공개                   │
       │                                                  │
       │ 예상 시간: 20-25시간 (복잡도 증가)               │
       ╰──────────────────────────────────────────────────╯

✻ Thinking…

  사용자가 토끼굴 마일스톤 시스템의 최종 기획을 검수해달라고 요청했습니다. Ultra Think로 에러, 버그, 사이드
   이펙트를 모두 고려해서 검수해야 합니다.

  주요 검토 포인트:
  1. 기술적 구현 가능성
  2. 데이터 무결성 및 저장 문제
  3. 성능 이슈
  4. UX/UI 충돌 가능성
  5. 기존 코드와의 호환성
  6. 엣지 케이스
  7. 보안 및 프라이버시
  8. 확장성

⏺ 🔍 Ultra Think - 토끼굴 시스템 최종 검수

  ⚠️ 발견된 주요 이슈 및 해결 방안

  ---
  1. 🐛 치명적 버그 위험

  문제 1: 중복 카운팅 버그

  // 🚨 현재 코드의 문제점
  class BallroomUnlock {
    bool checkUnlock(Recipe recipe) {
      for (String keyword in keywords) {
        if (recipe.emotionalStory.contains(keyword)) {
          totalSocialRecipes++;  // ❌ 한 레시피에 여러 키워드시 중복 카운트!
          peopleCooked.add(keyword);
        }
      }
    }
  }

  해결책:
  class BallroomUnlock {
    bool checkUnlock(Recipe recipe) {
      bool countedThisRecipe = false;
      for (String keyword in keywords) {
        if (recipe.emotionalStory.contains(keyword)) {
          peopleCooked.add(keyword);
          if (!countedThisRecipe) {
            totalSocialRecipes++;
            countedThisRecipe = true;  // ✅ 레시피당 1회만 카운트
          }
        }
      }
    }
  }

  문제 2: 레시피 수정시 중복 처리

  // 🚨 기존 레시피 수정시 재카운트 문제
  // updateRecipe()할 때마다 조건 체크가 중복 실행됨

  해결책:
  class UnlockChecker {
    Set<String> processedRecipeIds = {};  // 이미 처리한 레시피 추적

    bool shouldCheck(Recipe recipe) {
      if (processedRecipeIds.contains(recipe.id)) {
        return false;  // ✅ 이미 처리한 레시피는 스킵
      }
      processedRecipeIds.add(recipe.id);
      return true;
    }
  }

  ---
  2. 💾 데이터 무결성 문제

  문제 3: Hive 저장 실패시 동기화 문제

  // 🚨 언락 상태와 실제 데이터 불일치 가능
  // Hive 저장 실패시 UI는 업데이트되나 데이터는 유실

  해결책:
  class BurrowService {
    Future<bool> unlockRoom(String roomType) async {
      try {
        // 1. 먼저 Hive에 저장 시도
        await _saveToHive(roomType);

        // 2. 성공한 경우에만 UI 업데이트
        _updateUI(roomType);
        return true;
      } catch (e) {
        // 3. 실패시 롤백
        _rollbackUnlock(roomType);
        return false;
      }
    }
  }

  문제 4: 앱 재설치시 진행 상황 유실

  해결책:
  // 기존 레시피 데이터로부터 진행 상황 재계산
  class ProgressRecovery {
    Future<void> recalculateProgress() async {
      final allRecipes = await _hiveService.getAllRecipes();

      // 모든 언락 조건 재검증
      for (var recipe in allRecipes) {
        _checkAllUnlockConditions(recipe, skipAnimation: true);
      }
    }
  }

  ---
  3. 🎯 성능 이슈

  문제 5: 매 레시피 추가시 모든 조건 체크

  // 🚨 레시피 많아질수록 성능 저하
  // 5개 언락 조건 × 복잡한 문자열 검색 = 느림

  해결책:
  class OptimizedUnlockChecker {
    // 조건별 우선순위 설정
    final checkPriority = [
      'finedining',   // 가장 단순 (rating만 체크)
      'orchestra',    // Set 크기만 체크
      'hotspring',    // Map 3개 값만 체크
      'alchemy',      // 특정 조건시만 체크
      'ballroom',     // 문자열 검색 (가장 무거움)
    ];

    // 이미 달성한 조건은 스킵
    Future<void> checkUnlocks(Recipe recipe) async {
      for (String room in checkPriority) {
        if (unlockedRooms.contains(room)) continue;  // ✅ 스킵
        await _checkSpecificRoom(room, recipe);
      }
    }
  }

  ---
  4. 🔄 상태 관리 충돌

  문제 6: Provider 순환 참조

  // 🚨 RecipeProvider → BurrowProvider → UI → RecipeProvider
  // 순환 참조로 인한 무한 루프 가능성

  해결책:
  class BurrowProvider extends ChangeNotifier {
    // RecipeProvider를 직접 참조하지 않고 이벤트 방식 사용
    void onRecipeAdded(Recipe recipe) {
      _checkUnlocks(recipe);
      // notifyListeners()는 debounce 처리
      _debounceNotify();
    }

    Timer? _debounceTimer;
    void _debounceNotify() {
      _debounceTimer?.cancel();
      _debounceTimer = Timer(Duration(milliseconds: 300), () {
        notifyListeners();
      });
    }
  }

  ---
  5. 🎨 UI/UX 문제

  문제 7: 동시 다중 언락시 팝업 충돌

  // 🚨 한 번에 여러 조건 달성시 팝업이 겹침

  해결책:
  class UnlockQueue {
    final Queue<UnlockData> _queue = Queue();
    bool _isShowing = false;

    void addUnlock(UnlockData data) {
      _queue.add(data);
      _processQueue();
    }

    void _processQueue() async {
      if (_isShowing || _queue.isEmpty) return;

      _isShowing = true;
      final unlock = _queue.removeFirst();
      await _showUnlockDialog(unlock);
      _isShowing = false;

      // 다음 언락 처리 (1초 딜레이)
      await Future.delayed(Duration(seconds: 1));
      _processQueue();
    }
  }

  ---
  6. 🔐 엣지 케이스

  문제 8: 평점 null 처리

  // 🚨 recipe.rating이 null일 때 크래시
  moodRatings[recipe.mood] = recipe.rating!;  // 위험!

  해결책:
  if (recipe.rating != null && recipe.rating! >= 3) {
    moodRatings[recipe.mood] = recipe.rating!;
  } else {
    // null이면 기본값 3점 처리
    moodRatings[recipe.mood] = 3;
  }

  문제 9: 감정 스토리 빈 문자열

  // 🚨 emotionalStory가 빈 문자열일 때

  해결책:
  bool checkUnlock(Recipe recipe) {
    if (recipe.emotionalStory.isEmpty) return false;  // ✅ 조기 리턴
    // ... 나머지 로직
  }

  ---
  7. 📱 플랫폼별 이슈

  문제 10: 이미지 로딩 실패

  // 🚨 이미지 파일이 없거나 손상된 경우

  해결책:
  Widget buildRoomImage(String imagePath) {
    return Image.asset(
      imagePath,
      errorBuilder: (context, error, stackTrace) {
        return Container(
          color: Colors.grey[300],
          child: Icon(Icons.broken_image),
        );
      },
    );
  }

  ---
  8. 🔄 마이그레이션 이슈

  문제 11: 기존 사용자 데이터 처리

  해결책:
  class MigrationService {
    Future<void> migrateExistingUsers() async {
      final version = await _getAppVersion();

      if (version < "2.0.0") {  // 토끼굴 기능 추가 버전
        // 기존 레시피 소급 적용
        await _recalculateAllProgress();

        // 초기 언락 상태 설정
        await _setInitialUnlocks();
      }
    }
  }

  ---
  9. ⚡ 메모리 관리

  문제 12: 이미지 메모리 누수

  // 🚨 11개 이미지 계속 메모리에 유지

  해결책:
  class ImageCacheManager {
    final _cache = LruMap<String, ui.Image>(maximumSize: 5);

    Future<ui.Image> getImage(String path) async {
      if (!_cache.containsKey(path)) {
        _cache[path] = await _loadImage(path);
      }
      return _cache[path]!;
    }
  }

  ---
  ✅ 최종 체크리스트

  필수 수정 사항

  - 중복 카운팅 방지 로직 추가
  - 레시피 ID 기반 중복 체크
  - Hive 저장 실패시 롤백 처리
  - null 안전성 처리
  - 언락 큐 시스템 구현
  - 이미지 에러 처리

  권장 개선 사항

  - 성능 최적화 (조건 체크 우선순위)
  - 디바운스 처리
  - 메모리 캐시 관리
  - 마이그레이션 로직

  테스트 시나리오

  - 동시 다중 언락 테스트
  - 레시피 수정시 중복 체크
  - 앱 재설치 후 복구
  - 이미지 로딩 실패
  - 대량 레시피 성능

  ---
  📝 수정된 핵심 코드 예시

  // lib/services/burrow_unlock_service.dart
  class BurrowUnlockService {
    final Set<String> _processedIds = {};
    final UnlockQueue _unlockQueue = UnlockQueue();

    Future<void> checkAllUnlocks(Recipe recipe) async {
      // 1. 중복 체크
      if (!_shouldProcess(recipe)) return;

      // 2. 성능 최적화된 체크
      final unlocks = await _checkOptimized(recipe);

      // 3. 큐에 추가
      for (var unlock in unlocks) {
        _unlockQueue.add(unlock);
      }

      // 4. 안전한 저장
      await _saveProgress();
    }

    bool _shouldProcess(Recipe recipe) {
      if (_processedIds.contains(recipe.id)) return false;
      if (recipe.emotionalStory.isEmpty) return false;
      _processedIds.add(recipe.id);
      return true;
    }
  }

  이러한 수정사항들을 반영하면 안정적이고 버그 없는 토끼굴 시스템을 구현할 수 있습니다!

> /export burrow-milestone-checkup-before.txt
  ⎿  Conversation exported to: burrow-milestone-checkup-before.txt

> 해당 부분 반영한 최종 내용 정리 ultra think로 해주세요. 지금 정리해주는 내용을 토대로 개발을 착수할 
  것입니다. 꼼꼼하게 빼놓지 말고 작성해주세요. 개발 전 최종적으로 아주 중요한 정리 작업입니다.

✻ Thinking…

  사용자가 토끼굴 마일스톤 시스템의 최종 개발 계획을 요청했습니다. 이전에 논의된 모든 내용과 버그 검수 
  사항을 반영하여 개발 착수를 위한 완전한 정리가 필요합니다.

  핵심 포인트:
  1. 기본 성장 트랙 (레시피 개수 기반)
  2. 특별 공간 (숨겨진 조건)
  3. 이미지 리소스 11개 활용
  4. 버그 및 사이드 이펙트 해결 방안
  5. 구체적인 구현 코드
  6. 데이터 모델
  7. UI/UX 흐름
  8. 테스트 시나리오

  Ultra Think로 꼼꼼하게 정리해야 합니다.

⏺ 🐰 토끼굴 마일스톤 시스템 - 최종 개발 명세서

  📌 시스템 개요

  사용자가 레시피를 작성하면서 자연스럽게 토끼굴이 확장되는 게이미피케이션 시스템. 기본 성장
  트랙(레시피 개수)과 숨겨진 특별 공간(행동 패턴)으로 구성.

  ---
  1️⃣ 이미지 리소스 구조

  필요 이미지 파일 (11개)

  assets/images/burrow/
  ├── burrow_tiny.png         # 1개 - 토끼굴 입구
  ├── burrow_small.png        # 3개 - 작은 부엌
  ├── burrow_medium.png       # 10개 - 레스토랑
  ├── burrow_study.png        # 20개 - 도서관
  ├── burrow_large.png        # 30개 - 대저택
  ├── burrow_ballroom.png     # 특별 - 무도회장
  ├── burrow_hot_spring.png   # 특별 - 온천탕
  ├── burrow_orchestra.png    # 특별 - 음악회장
  ├── burrow_alchemy.png      # 특별 - 실험실
  ├── burrow_finedining.png   # 특별 - 파인다이닝
  └── burrow_locked.png       # 공통 - 잠긴 상태

  pubspec.yaml 추가

  flutter:
    assets:
      - assets/images/burrow/

  ---
  2️⃣ 데이터 모델 구조

  lib/models/burrow_milestone.dart

  import 'package:hive/hive.dart';

  enum BurrowType {
    growth,    // 기본 성장
    special,   // 특별 공간
  }

  @HiveType(typeId: 10)
  class BurrowMilestone extends HiveObject {
    @HiveField(0)
    final int level;

    @HiveField(1)
    final int? requiredRecipes;  // 기본 트랙만 사용

    @HiveField(2)
    final String title;

    @HiveField(3)
    final String subtitle;

    @HiveField(4)
    final String description;

    @HiveField(5)
    final String imagePath;

    @HiveField(6)
    final BurrowType type;

    @HiveField(7)
    bool isUnlocked;

    @HiveField(8)
    DateTime? unlockedDate;

    @HiveField(9)
    final String? unlockCondition;  // 특별 공간용

    BurrowMilestone({
      required this.level,
      this.requiredRecipes,
      required this.title,
      required this.subtitle,
      required this.description,
      required this.imagePath,
      required this.type,
      this.isUnlocked = false,
      this.unlockedDate,
      this.unlockCondition,
    });
  }

  lib/models/burrow_progress.dart

  @HiveType(typeId: 11)
  class BurrowProgress extends HiveObject {
    @HiveField(0)
    int totalRecipes;

    @HiveField(1)
    List<String> unlockedRooms;

    @HiveField(2)
    Map<String, dynamic> hiddenProgress;

    @HiveField(3)
    Set<String> processedRecipeIds;  // 중복 방지

    @HiveField(4)
    DateTime? lastUnlockDate;

    BurrowProgress({
      this.totalRecipes = 0,
      List<String>? unlockedRooms,
      Map<String, dynamic>? hiddenProgress,
      Set<String>? processedRecipeIds,
      this.lastUnlockDate,
    }) : unlockedRooms = unlockedRooms ?? [],
         hiddenProgress = hiddenProgress ?? {},
         processedRecipeIds = processedRecipeIds ?? {};
  }

  ---
  3️⃣ 마일스톤 정의

  lib/config/burrow_config.dart

  class BurrowConfig {
    static final List<BurrowMilestone> milestones = [
      // === 기본 성장 트랙 ===
      BurrowMilestone(
        level: 1,
        requiredRecipes: 1,
        title: "🌱 토끼굴 입구",
        subtitle: "첫 발걸음",
        description: "작은 시작이지만 큰 여정의 시작입니다",
        imagePath: "assets/images/burrow/burrow_tiny.png",
        type: BurrowType.growth,
      ),
      BurrowMilestone(
        level: 2,
        requiredRecipes: 3,
        title: "🏠 작은 부엌",
        subtitle: "요리하는 토끼",
        description: "이제 제대로 된 요리 공간이 생겼어요",
        imagePath: "assets/images/burrow/burrow_small.png",
        type: BurrowType.growth,
      ),
      BurrowMilestone(
        level: 3,
        requiredRecipes: 10,
        title: "🍳 토끼 레스토랑",
        subtitle: "2층 구조 완성",
        description: "부엌과 식당을 갖춘 본격적인 공간",
        imagePath: "assets/images/burrow/burrow_medium.png",
        type: BurrowType.growth,
      ),
      BurrowMilestone(
        level: 4,
        requiredRecipes: 20,
        title: "📚 레시피 도서관",
        subtitle: "지식의 공간",
        description: "수많은 레시피와 요리 지식이 쌓이는 곳",
        imagePath: "assets/images/burrow/burrow_study.png",
        type: BurrowType.growth,
      ),
      BurrowMilestone(
        level: 5,
        requiredRecipes: 30,
        title: "🏰 거대한 토끼굴",
        subtitle: "3층 대저택",
        description: "복잡한 통로와 여러 방을 갖춘 대저택",
        imagePath: "assets/images/burrow/burrow_large.png",
        type: BurrowType.growth,
      ),

      // === 특별 공간 (숨겨진 조건) ===
      BurrowMilestone(
        level: 101,  // 특별 공간은 100번대
        title: "💃 지하 무도회장",
        subtitle: "사교적 요리사",
        description: "사랑하는 사람들을 위해 요리하는 당신의 공간",
        imagePath: "assets/images/burrow/burrow_ballroom.png",
        type: BurrowType.special,
        unlockCondition: "social_cooking",
      ),
      BurrowMilestone(
        level: 102,
        title: "♨️ 지하 온천탕",
        subtitle: "힐링 요리사",
        description: "힘든 감정들을 요리로 치유하는 특별한 공간",
        imagePath: "assets/images/burrow/burrow_hot_spring.png",
        type: BurrowType.special,
        unlockCondition: "healing_cooking",
      ),
      BurrowMilestone(
        level: 103,
        title: "🎼 지하 음악회장",
        subtitle: "감정 마에스트로",
        description: "8가지 감정의 하모니를 완성한 당신의 무대",
        imagePath: "assets/images/burrow/burrow_orchestra.png",
        type: BurrowType.special,
        unlockCondition: "emotion_master",
      ),
      BurrowMilestone(
        level: 104,
        title: "⚗️ 비밀 실험실",
        subtitle: "도전적 요리사",
        description: "실패를 두려워하지 않는 당신의 연구소",
        imagePath: "assets/images/burrow/burrow_alchemy.png",
        type: BurrowType.special,
        unlockCondition: "challenge_cooking",
      ),
      BurrowMilestone(
        level: 105,
        title: "🍷 파인다이닝",
        subtitle: "완벽주의자",
        description: "미슐랭 급 토끼 셰프의 최고급 레스토랑",
        imagePath: "assets/images/burrow/burrow_finedining.png",
        type: BurrowType.special,
        unlockCondition: "perfect_cooking",
      ),
    ];
  }

  ---
  4️⃣ 언락 체크 로직 (버그 수정 반영)

  lib/services/burrow_unlock_service.dart

  import 'dart:async';
  import 'dart:collection';
  import 'package:flutter/material.dart';
  import '../models/recipe.dart';
  import '../models/mood.dart';
  import '../models/burrow_milestone.dart';
  import '../models/burrow_progress.dart';

  class BurrowUnlockService {
    static final BurrowUnlockService _instance = BurrowUnlockService._internal();
    factory BurrowUnlockService() => _instance;
    BurrowUnlockService._internal();

    // 중복 방지
    final Set<String> _processedRecipeIds = {};

    // 언락 큐 (동시 다중 언락 처리)
    final Queue<BurrowMilestone> _unlockQueue = Queue();
    bool _isShowingUnlock = false;

    // 숨겨진 진행 상황
    final Map<String, dynamic> _hiddenProgress = {
      'social_people': <String>{},
      'social_count': 0,
      'healing_moods': <Mood, int>{
        Mood.sad: 0,
        Mood.tired: 0,
        Mood.nostalgic: 0,
      },
      'emotion_collection': <Mood>{},
      'remake_attempts': <String, List<int>>{},
      'remake_success': 0,
      'perfect_recipes': <String>[],
      'consecutive_perfect': 0,
    };

    /// 메인 체크 함수 (RecipeProvider에서 호출)
    Future<List<BurrowMilestone>> checkAllUnlocks(Recipe recipe) async {
      // 1. 중복 체크
      if (!_shouldProcess(recipe)) return [];

      List<BurrowMilestone> newUnlocks = [];

      // 2. 기본 성장 트랙 체크
      final growthUnlock = await _checkGrowthTrack(recipe);
      if (growthUnlock != null) newUnlocks.add(growthUnlock);

      // 3. 특별 공간 체크 (최적화: 이미 언락된 것은 스킵)
      final specialUnlocks = await _checkSpecialRooms(recipe);
      newUnlocks.addAll(specialUnlocks);

      // 4. 언락 큐에 추가
      for (var unlock in newUnlocks) {
        _unlockQueue.add(unlock);
      }

      // 5. 큐 처리
      _processUnlockQueue();

      return newUnlocks;
    }

    bool _shouldProcess(Recipe recipe) {
      // 중복 방지
      if (_processedRecipeIds.contains(recipe.id)) return false;

      // 빈 감정 스토리 체크
      if (recipe.emotionalStory.isEmpty) return false;

      _processedRecipeIds.add(recipe.id);
      return true;
    }

    /// 기본 성장 트랙 체크
    Future<BurrowMilestone?> _checkGrowthTrack(Recipe recipe) async {
      final totalRecipes = await _getTotalRecipeCount();

      final growthMilestones = BurrowConfig.milestones
          .where((m) => m.type == BurrowType.growth)
          .where((m) => !m.isUnlocked)
          .where((m) => m.requiredRecipes! <= totalRecipes)
          .toList();

      if (growthMilestones.isNotEmpty) {
        growthMilestones.sort((a, b) =>
            b.requiredRecipes!.compareTo(a.requiredRecipes!));
        return growthMilestones.first;
      }

      return null;
    }

    /// 특별 공간 체크
    Future<List<BurrowMilestone>> _checkSpecialRooms(Recipe recipe) async {
      List<BurrowMilestone> unlocks = [];

      // 무도회장 체크
      if (await _checkBallroom(recipe)) {
        unlocks.add(_getSpecialRoom('social_cooking'));
      }

      // 온천탕 체크
      if (await _checkHotSpring(recipe)) {
        unlocks.add(_getSpecialRoom('healing_cooking'));
      }

      // 음악회장 체크
      if (await _checkOrchestra(recipe)) {
        unlocks.add(_getSpecialRoom('emotion_master'));
      }

      // 실험실 체크
      if (await _checkAlchemy(recipe)) {
        unlocks.add(_getSpecialRoom('challenge_cooking'));
      }

      // 파인다이닝 체크
      if (await _checkFineDining(recipe)) {
        unlocks.add(_getSpecialRoom('perfect_cooking'));
      }

      return unlocks;
    }

    /// 무도회장: 누군가를 위한 요리 10개 (3명 이상)
    bool _checkBallroom(Recipe recipe) {
      final keywords = [
        '친구', '가족', '엄마', '아빠', '동생', '언니',
        '오빠', '누나', '할머니', '할아버지', '연인',
        '애인', '남편', '아내', '동료', '선배', '후배'
      ];

      bool foundKeyword = false;
      for (String keyword in keywords) {
        if (recipe.emotionalStory.contains(keyword)) {
          (_hiddenProgress['social_people'] as Set<String>).add(keyword);
          foundKeyword = true;
        }
      }

      // 한 레시피당 1회만 카운트
      if (foundKeyword) {
        _hiddenProgress['social_count']++;
      }

      return _hiddenProgress['social_count'] >= 10 &&
             (_hiddenProgress['social_people'] as Set).length >= 3;
    }

    /// 온천탕: sad/tired/nostalgic 각 3개씩
    bool _checkHotSpring(Recipe recipe) {
      final healingMoods = _hiddenProgress['healing_moods'] as Map<Mood, int>;

      if (healingMoods.containsKey(recipe.mood)) {
        healingMoods[recipe.mood] = healingMoods[recipe.mood]! + 1;
      }

      return healingMoods[Mood.sad]! >= 3 &&
             healingMoods[Mood.tired]! >= 3 &&
             healingMoods[Mood.nostalgic]! >= 3;
    }

    /// 음악회장: 8가지 감정 컬렉션 (평점 3점 이상)
    bool _checkOrchestra(Recipe recipe) {
      if (recipe.rating != null && recipe.rating! >= 3) {
        (_hiddenProgress['emotion_collection'] as Set<Mood>).add(recipe.mood);
      }

      return (_hiddenProgress['emotion_collection'] as Set).length ==
             Mood.values.length;
    }

    /// 실험실: 실패 후 재도전 성공 3회
    bool _checkAlchemy(Recipe recipe) {
      final simplifiedTitle = recipe.title
          .replaceAll(' ', '')
          .toLowerCase();

      final attempts = _hiddenProgress['remake_attempts'] as Map<String, List<int>>;

      if (!attempts.containsKey(simplifiedTitle)) {
        attempts[simplifiedTitle] = [];
      }

      attempts[simplifiedTitle]!.add(recipe.rating ?? 3);

      final attemptList = attempts[simplifiedTitle]!;
      if (attemptList.length >= 2) {
        // 첫 시도 2점 이하, 마지막 시도 4점 이상
        if (attemptList.first <= 2 && attemptList.last >= 4) {
          _hiddenProgress['remake_success']++;
        }
      }

      return _hiddenProgress['remake_success'] >= 3;
    }

    /// 파인다이닝: 평점 5점 10개
    bool _checkFineDining(Recipe recipe) {
      if (recipe.rating == 5) {
        (_hiddenProgress['perfect_recipes'] as List).add(recipe.id);
        _hiddenProgress['consecutive_perfect']++;
      } else {
        _hiddenProgress['consecutive_perfect'] = 0;
      }

      return (_hiddenProgress['perfect_recipes'] as List).length >= 10;
    }

    /// 언락 큐 처리
    void _processUnlockQueue() async {
      if (_isShowingUnlock || _unlockQueue.isEmpty) return;

      _isShowingUnlock = true;
      final unlock = _unlockQueue.removeFirst();

      // UI에 언락 이벤트 전달
      await _showUnlockDialog(unlock);

      _isShowingUnlock = false;

      // 다음 언락 처리 (1초 딜레이)
      if (_unlockQueue.isNotEmpty) {
        await Future.delayed(Duration(seconds: 1));
        _processUnlockQueue();
      }
    }

    // Helper 함수들
    BurrowMilestone _getSpecialRoom(String condition) {
      return BurrowConfig.milestones.firstWhere(
        (m) => m.unlockCondition == condition
      );
    }

    Future<int> _getTotalRecipeCount() async {
      // HiveService에서 총 레시피 수 가져오기
      return 0; // TODO: 실제 구현
    }

    Future<void> _showUnlockDialog(BurrowMilestone milestone) async {
      // Provider나 EventBus를 통해 UI에 전달
      // TODO: 실제 구현
    }
  }

  ---
  5️⃣ Provider 통합

  lib/providers/burrow_provider.dart

  import 'package:flutter/material.dart';
  import 'dart:async';
  import '../models/burrow_milestone.dart';
  import '../models/burrow_progress.dart';
  import '../services/burrow_unlock_service.dart';
  import '../services/hive_service.dart';

  class BurrowProvider extends ChangeNotifier {
    final BurrowUnlockService _unlockService = BurrowUnlockService();
    final HiveService _hiveService;

    BurrowProgress? _progress;
    List<BurrowMilestone> _milestones = [];
    Timer? _debounceTimer;

    BurrowProvider({HiveService? hiveService})
        : _hiveService = hiveService ?? HiveService() {
      _loadProgress();
    }

    // Getters
    BurrowProgress? get progress => _progress;
    List<BurrowMilestone> get milestones => _milestones;

    List<BurrowMilestone> get unlockedMilestones =>
        _milestones.where((m) => m.isUnlocked).toList();

    BurrowMilestone? get nextMilestone =>
        _milestones
            .where((m) => m.type == BurrowType.growth && !m.isUnlocked)
            .firstOrNull;

    int get progressPercentage {
      if (nextMilestone == null || _progress == null) return 0;
      final required = nextMilestone!.requiredRecipes ?? 0;
      if (required == 0) return 0;
      return ((_progress!.totalRecipes / required) * 100).round();
    }

    String get currentTitle {
      if (_progress == null) return "🥚 알 토끼";
      final count = _progress!.totalRecipes;

      if (count >= 30) return "🏰 토끼굴 주인";
      if (count >= 20) return "📚 레시피 수집가";
      if (count >= 10) return "🍳 주방장 토끼";
      if (count >= 3) return "🏠 요리하는 토끼";
      if (count >= 1) return "🌱 새내기 토끼";
      return "🥚 알 토끼";
    }

    /// 초기 로드
    Future<void> _loadProgress() async {
      _milestones = List.from(BurrowConfig.milestones);

      // Hive에서 진행 상황 로드
      _progress = await _hiveService.getBurrowProgress();

      if (_progress == null) {
        _progress = BurrowProgress();
        await _hiveService.saveBurrowProgress(_progress!);
      }

      // 언락 상태 복원
      for (var roomId in _progress!.unlockedRooms) {
        final index = _milestones.indexWhere((m) =>
            m.level.toString() == roomId);
        if (index != -1) {
          _milestones[index].isUnlocked = true;
        }
      }

      notifyListeners();
    }

    /// 레시피 추가시 호출 (RecipeProvider에서)
    Future<void> onRecipeAdded(Recipe recipe) async {
      if (_progress == null) return;

      // 총 레시피 수 증가
      _progress!.totalRecipes++;

      // 언락 체크
      final unlocks = await _unlockService.checkAllUnlocks(recipe);

      // 새로운 언락이 있으면 처리
      if (unlocks.isNotEmpty) {
        for (var unlock in unlocks) {
          await _handleUnlock(unlock);
        }
      }

      // 진행 상황 저장
      await _saveProgress();

      // UI 업데이트 (디바운스)
      _debounceNotify();
    }

    /// 언락 처리
    Future<void> _handleUnlock(BurrowMilestone milestone) async {
      final index = _milestones.indexWhere((m) => m.level == milestone.level);
      if (index != -1) {
        _milestones[index].isUnlocked = true;
        _milestones[index].unlockedDate = DateTime.now();

        _progress!.unlockedRooms.add(milestone.level.toString());
        _progress!.lastUnlockDate = DateTime.now();
      }
    }

    /// 진행 상황 저장
    Future<void> _saveProgress() async {
      if (_progress != null) {
        await _hiveService.saveBurrowProgress(_progress!);
      }
    }

    /// 디바운스 알림
    void _debounceNotify() {
      _debounceTimer?.cancel();
      _debounceTimer = Timer(Duration(milliseconds: 300), () {
        notifyListeners();
      });
    }

    @override
    void dispose() {
      _debounceTimer?.cancel();
      super.dispose();
    }
  }

  RecipeProvider 수정 사항

  // lib/providers/recipe_provider.dart에 추가
  import 'burrow_provider.dart';

  class RecipeProvider extends ChangeNotifier {
    // ... 기존 코드 ...

    /// 새 레시피 추가 (수정)
    Future<void> addRecipe(Recipe recipe, BuildContext context) async {
      try {
        await _hiveService.saveRecipe(recipe);
        _recipes.insert(0, recipe);

        // 🆕 토끼굴 체크
        final burrowProvider = context.read<BurrowProvider>();
        await burrowProvider.onRecipeAdded(recipe);

        _clearError();
        notifyListeners();

        developer.log('Added recipe: ${recipe.title}', name: 'RecipeProvider');
      } catch (e) {
        _setError('Failed to add recipe: $e');
        developer.log('Failed to add recipe: $e', name: 'RecipeProvider');
      }
    }
  }

  ---
  6️⃣ UI 구현

  lib/screens/burrow/burrow_screen.dart

  import 'package:flutter/material.dart';
  import 'package:provider/provider.dart';
  import '../../config/theme.dart';
  import '../../providers/burrow_provider.dart';
  import '../../models/burrow_milestone.dart';

  class BurrowScreen extends StatelessWidget {
    const BurrowScreen({super.key});

    @override
    Widget build(BuildContext context) {
      return Scaffold(
        backgroundColor: AppTheme.backgroundColor,
        appBar: AppBar(
          title: Text('🐰 나의 토끼굴'),
          backgroundColor: AppTheme.backgroundColor,
          elevation: 0,
        ),
        body: Consumer<BurrowProvider>(
          builder: (context, provider, child) {
            final growthMilestones = provider.milestones
                .where((m) => m.type == BurrowType.growth)
                .toList();
            final specialMilestones = provider.milestones
                .where((m) => m.type == BurrowType.special)
                .toList();

            return CustomScrollView(
              slivers: [
                // 현재 타이틀
                SliverToBoxAdapter(
                  child: _buildTitleCard(provider.currentTitle),
                ),

                // 성장하는 굴
                SliverToBoxAdapter(
                  child: _buildSectionHeader('성장하는 굴'),
                ),
                SliverList(
                  delegate: SliverChildBuilderDelegate(
                    (context, index) => _buildMilestoneCard(
                      growthMilestones[index],
                      provider.progress?.totalRecipes ?? 0,
                    ),
                    childCount: growthMilestones.length,
                  ),
                ),

                // 특별한 공간
                SliverToBoxAdapter(
                  child: _buildSectionHeader('특별한 공간'),
                ),
                SliverList(
                  delegate: SliverChildBuilderDelegate(
                    (context, index) => _buildSpecialCard(
                      specialMilestones[index],
                    ),
                    childCount: specialMilestones.length,
                  ),
                ),
              ],
            );
          },
        ),
      );
    }

    Widget _buildTitleCard(String title) {
      return Container(
        margin: EdgeInsets.all(16),
        padding: EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: AppTheme.primaryLight.withOpacity(0.3),
          borderRadius: BorderRadius.circular(12),
        ),
        child: Text(
          '현재 당신은: $title',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
            color: AppTheme.textPrimary,
          ),
          textAlign: TextAlign.center,
        ),
      );
    }

    Widget _buildSectionHeader(String title) {
      return Padding(
        padding: EdgeInsets.all(16),
        child: Text(
          '═══ $title ═══',
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w600,
            color: AppTheme.textSecondary,
          ),
          textAlign: TextAlign.center,
        ),
      );
    }

    Widget _buildMilestoneCard(BurrowMilestone milestone, int currentRecipes) {
      final isUnlocked = milestone.isUnlocked;
      final progress = milestone.requiredRecipes != null
          ? currentRecipes / milestone.requiredRecipes!
          : 0.0;

      return Container(
        margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        child: Card(
          color: isUnlocked ? AppTheme.cardColor : Colors.grey[200],
          child: InkWell(
            onTap: isUnlocked ? () => _showMilestoneDetail(milestone) : null,
            child: Padding(
              padding: EdgeInsets.all(16),
              child: Row(
                children: [
                  // 이미지
                  Container(
                    width: 60,
                    height: 60,
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(8),
                      image: DecorationImage(
                        image: AssetImage(
                          isUnlocked
                              ? milestone.imagePath
                              : 'assets/images/burrow/burrow_locked.png'
                        ),
                        fit: BoxFit.cover,
                        opacity: isUnlocked ? 1.0 : 0.5,
                      ),
                    ),
                  ),
                  SizedBox(width: 16),

                  // 내용
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          milestone.title,
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            color: isUnlocked
                                ? AppTheme.textPrimary
                                : Colors.grey,
                          ),
                        ),
                        Text(
                          milestone.subtitle,
                          style: TextStyle(
                            fontSize: 14,
                            color: isUnlocked
                                ? AppTheme.textSecondary
                                : Colors.grey[400],
                          ),
                        ),
                        if (!isUnlocked && milestone.requiredRecipes != null)
                          Column(
                            children: [
                              SizedBox(height: 8),
                              LinearProgressIndicator(
                                value: progress.clamp(0.0, 1.0),
                                backgroundColor: Colors.grey[300],
                                valueColor: AlwaysStoppedAnimation(
                                  AppTheme.primaryColor,
                                ),
                              ),
                              SizedBox(height: 4),
                              Text(
                                '$currentRecipes / ${milestone.requiredRecipes}',
                                style: TextStyle(fontSize: 12),
                              ),
                            ],
                          ),
                      ],
                    ),
                  ),

                  // 상태 아이콘
                  Icon(
                    isUnlocked ? Icons.lock_open : Icons.lock,
                    color: isUnlocked
                        ? AppTheme.primaryColor
                        : Colors.grey,
                  ),
                ],
              ),
            ),
          ),
        ),
      );
    }

    Widget _buildSpecialCard(BurrowMilestone milestone) {
      final isUnlocked = milestone.isUnlocked;

      return Container(
        margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        child: Card(
          color: isUnlocked ? AppTheme.cardColor : Colors.grey[200],
          child: InkWell(
            onTap: isUnlocked ? () => _showMilestoneDetail(milestone) : null,
            child: Padding(
              padding: EdgeInsets.all(16),
              child: Row(
                children: [
                  // 이미지 또는 물음표
                  Container(
                    width: 60,
                    height: 60,
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(8),
                      color: Colors.grey[300],
                    ),
                    child: isUnlocked
                        ? Image.asset(
                            milestone.imagePath,
                            fit: BoxFit.cover,
                          )
                        : Center(
                            child: Text(
                              '?',
                              style: TextStyle(
                                fontSize: 30,
                                fontWeight: FontWeight.bold,
                                color: Colors.grey[500],
                              ),
                            ),
                          ),
                  ),
                  SizedBox(width: 16),

                  // 내용
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          isUnlocked ? milestone.title : '???',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            color: isUnlocked
                                ? AppTheme.textPrimary
                                : Colors.grey,
                          ),
                        ),
                        Text(
                          isUnlocked
                              ? milestone.subtitle
                              : '특별한 조건을 달성하면 열립니다',
                          style: TextStyle(
                            fontSize: 14,
                            fontStyle: isUnlocked
                                ? FontStyle.normal
                                : FontStyle.italic,
                            color: isUnlocked
                                ? AppTheme.textSecondary
                                : Colors.grey[400],
                          ),
                        ),
                      ],
                    ),
                  ),

                  // 상태 아이콘
                  Icon(
                    isUnlocked ? Icons.lock_open : Icons.lock,
                    color: isUnlocked
                        ? AppTheme.primaryColor
                        : Colors.grey,
                  ),
                ],
              ),
            ),
          ),
        ),
      );
    }

    void _showMilestoneDetail(BurrowMilestone milestone) {
      // TODO: 상세 다이얼로그 표시
    }
  }

  lib/widgets/burrow/burrow_progress_widget.dart

  import 'package:flutter/material.dart';
  import 'package:provider/provider.dart';
  import '../../config/theme.dart';
  import '../../providers/burrow_provider.dart';
  import '../../screens/burrow/burrow_screen.dart';

  class BurrowProgressWidget extends StatelessWidget {
    const BurrowProgressWidget({super.key});

    @override
    Widget build(BuildContext context) {
      return Consumer<BurrowProvider>(
        builder: (context, provider, child) {
          final progress = provider.progress;
          final nextMilestone = provider.nextMilestone;

          if (progress == null || nextMilestone == null) {
            return SizedBox.shrink();
          }

          final remaining = (nextMilestone.requiredRecipes ?? 0) -
                           progress.totalRecipes;

          return GestureDetector(
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => BurrowScreen(),
                ),
              );
            },
            child: Container(
              margin: EdgeInsets.all(16),
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: AppTheme.cardColor,
                borderRadius: BorderRadius.circular(12),
                boxShadow: AppTheme.vintageShadow,
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Text(
                        '🐰 토끼굴 여정',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                          color: AppTheme.textPrimary,
                        ),
                      ),
                      Spacer(),
                      Text(
                        provider.currentTitle,
                        style: TextStyle(
                          fontSize: 14,
                          color: AppTheme.textSecondary,
                        ),
                      ),
                    ],
                  ),
                  SizedBox(height: 12),

                  // 진행바
                  LinearProgressIndicator(
                    value: provider.progressPercentage / 100,
                    backgroundColor: Colors.grey[300],
                    valueColor: AlwaysStoppedAnimation(AppTheme.primaryColor),
                    minHeight: 8,
                  ),
                  SizedBox(height: 8),

                  // 다음 목표
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        '다음: ${nextMilestone.title}',
                        style: TextStyle(
                          fontSize: 14,
                          color: AppTheme.textSecondary,
                        ),
                      ),
                      Text(
                        '$remaining개 남음!',
                        style: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                          color: AppTheme.primaryColor,
                        ),
                      ),
                    ],
                  ),

                  SizedBox(height: 8),
                  Text(
                    '탭하여 토끼굴 구경하기 →',
                    style: TextStyle(
                      fontSize: 12,
                      color: AppTheme.textTertiary,
                      fontStyle: FontStyle.italic,
                    ),
                  ),
                ],
              ),
            ),
          );
        },
      );
    }
  }

  lib/widgets/burrow/achievement_dialog.dart

  import 'package:flutter/material.dart';
  import '../../config/theme.dart';
  import '../../models/burrow_milestone.dart';

  class AchievementDialog extends StatefulWidget {
    final BurrowMilestone milestone;

    const AchievementDialog({
      super.key,
      required this.milestone,
    });

    static void show(BuildContext context, BurrowMilestone milestone) {
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => AchievementDialog(milestone: milestone),
      );
    }

    @override
    State<AchievementDialog> createState() => _AchievementDialogState();
  }

  class _AchievementDialogState extends State<AchievementDialog>
      with SingleTickerProviderStateMixin {
    late AnimationController _controller;
    late Animation<double> _scaleAnimation;
    late Animation<double> _fadeAnimation;

    @override
    void initState() {
      super.initState();
      _controller = AnimationController(
        duration: Duration(milliseconds: 800),
        vsync: this,
      );

      _scaleAnimation = Tween<double>(
        begin: 0.5,
        end: 1.0,
      ).animate(CurvedAnimation(
        parent: _controller,
        curve: Curves.elasticOut,
      ));

      _fadeAnimation = Tween<double>(
        begin: 0.0,
        end: 1.0,
      ).animate(CurvedAnimation(
        parent: _controller,
        curve: Interval(0.0, 0.5),
      ));

      _controller.forward();
    }

    @override
    void dispose() {
      _controller.dispose();
      super.dispose();
    }

    @override
    Widget build(BuildContext context) {
      final isSpecial = widget.milestone.type == BurrowType.special;

      return Dialog(
        backgroundColor: Colors.transparent,
        child: AnimatedBuilder(
          animation: _controller,
          builder: (context, child) {
            return FadeTransition(
              opacity: _fadeAnimation,
              child: ScaleTransition(
                scale: _scaleAnimation,
                child: Container(
                  padding: EdgeInsets.all(24),
                  decoration: BoxDecoration(
                    color: AppTheme.backgroundColor,
                    borderRadius: BorderRadius.circular(20),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(0.3),
                        blurRadius: 20,
                        offset: Offset(0, 10),
                      ),
                    ],
                  ),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      // 타이틀
                      Text(
                        isSpecial ? '✨ 특별한 공간 발견! ✨' : '🎉 축하합니다! 🎉',
                        style: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: AppTheme.primaryColor,
                        ),
                        textAlign: TextAlign.center,
                      ),
                      SizedBox(height: 20),

                      // 이미지
                      Container(
                        width: 200,
                        height: 200,
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(12),
                          boxShadow: AppTheme.vintageShadow,
                        ),
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(12),
                          child: Image.asset(
                            widget.milestone.imagePath,
                            fit: BoxFit.cover,
                            errorBuilder: (context, error, stackTrace) {
                              return Container(
                                color: Colors.grey[300],
                                child: Icon(
                                  Icons.image_not_supported,
                                  size: 50,
                                  color: Colors.grey[500],
                                ),
                              );
                            },
                          ),
                        ),
                      ),
                      SizedBox(height: 20),

                      // 마일스톤 정보
                      Text(
                        widget.milestone.title,
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: AppTheme.textPrimary,
                        ),
                        textAlign: TextAlign.center,
                      ),
                      SizedBox(height: 8),
                      Text(
                        widget.milestone.subtitle,
                        style: TextStyle(
                          fontSize: 16,
                          color: AppTheme.textSecondary,
                        ),
                        textAlign: TextAlign.center,
                      ),
                      SizedBox(height: 12),
                      Text(
                        widget.milestone.description,
                        style: TextStyle(
                          fontSize: 14,
                          color: AppTheme.textTertiary,
                          fontStyle: FontStyle.italic,
                        ),
                        textAlign: TextAlign.center,
                      ),
                      SizedBox(height: 24),

                      // 버튼들
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        children: [
                          TextButton(
                            onPressed: () {
                              Navigator.of(context).pop();
                            },
                            child: Text('닫기'),
                          ),
                          ElevatedButton(
                            onPressed: () {
                              Navigator.of(context).pop();
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) => BurrowScreen(),
                                ),
                              );
                            },
                            style: ElevatedButton.styleFrom(
                              backgroundColor: AppTheme.primaryColor,
                            ),
                            child: Text(
                              '토끼굴 탐험하기',
                              style: TextStyle(color: Colors.white),
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            );
          },
        ),
      );
    }
  }

  ---
  7️⃣ 통합 및 초기화

  main.dart 수정

  // Hive TypeAdapter 등록 추가
  Hive.registerAdapter(BurrowMilestoneAdapter());
  Hive.registerAdapter(BurrowProgressAdapter());
  Hive.registerAdapter(BurrowTypeAdapter());

  // Provider 추가
  MultiProvider(
    providers: [
      ChangeNotifierProvider(create: (_) => RecipeProvider()),
      ChangeNotifierProvider(create: (_) => BurrowProvider()), // 🆕
      // ... 기타 providers
    ],
  )

  홈 화면에 위젯 추가

  // lib/screens/home_screen.dart
  Widget _buildContentView(RecipeProvider provider) {
    return CustomScrollView(
      slivers: [
        // 개인 통계
        SliverToBoxAdapter(
          child: _buildStatsCard(provider),
        ),

        // 🆕 토끼굴 진행 위젯
        SliverToBoxAdapter(
          child: BurrowProgressWidget(),
        ),

        // ... 나머지 콘텐츠
      ],
    );
  }

  FAB 메뉴 옵션 추가 (선택)

  // FAB 확장 메뉴에 추가
  SpeedDialChild(
    child: Icon(Icons.explore),
    backgroundColor: AppTheme.primaryLight,
    label: '토끼굴 탐험',
    onTap: () {
      Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => BurrowScreen()),
      );
    },
  ),

  ---
  8️⃣ HiveService 확장

  lib/services/hive_service.dart 추가

  class HiveService {
    // ... 기존 코드 ...

    static const String _burrowProgressBoxName = 'burrow_progress';
    Box<BurrowProgress>? _burrowBox;

    Future<BurrowProgress?> getBurrowProgress() async {
      try {
        if (_burrowBox == null || !_burrowBox!.isOpen) {
          _burrowBox = await Hive.openBox<BurrowProgress>(_burrowProgressBoxName);
        }
        return _burrowBox!.get('progress');
      } catch (e) {
        developer.log('Failed to get burrow progress: $e', name: 'HiveService');
        return null;
      }
    }

    Future<void> saveBurrowProgress(BurrowProgress progress) async {
      try {
        if (_burrowBox == null || !_burrowBox!.isOpen) {
          _burrowBox = await Hive.openBox<BurrowProgress>(_burrowProgressBoxName);
        }
        await _burrowBox!.put('progress', progress);
        developer.log('Burrow progress saved', name: 'HiveService');
      } catch (e) {
        developer.log('Failed to save burrow progress: $e', name: 'HiveService');
        throw Exception('Failed to save burrow progress: $e');
      }
    }
  }

  ---
  9️⃣ 테스트 시나리오

  필수 테스트 항목

  1. 기본 성장 트랙
    - 1, 3, 10, 20, 30개 달성시 정확한 언락
    - 진행바 표시 정확성
    - 언락 애니메이션
  2. 특별 공간 언락
    - 무도회장: "엄마", "친구", "동료" 포함 레시피 10개
    - 온천탕: sad 3개, tired 3개, nostalgic 3개
    - 음악회장: 8가지 감정 각 1개씩 (평점 3점 이상)
    - 실험실: 같은 요리 2점→5점 리메이크 3회
    - 파인다이닝: 평점 5점 10개
  3. 엣지 케이스
    - 레시피 수정시 중복 카운트 방지
    - 동시 다중 언락 (큐 처리)
    - 앱 재설치 후 진행 복구
    - 이미지 로딩 실패 처리
  4. 성능 테스트
    - 100개 이상 레시피시 체크 속도
    - 메모리 사용량 모니터링

  ---
  🚀 구현 순서

  1. Day 1: 기본 구조
    - 데이터 모델 생성
    - Hive TypeAdapter 구현
    - 기본 Provider 설정
  2. Day 2: 언락 로직
    - BurrowUnlockService 구현
    - 각 특별 공간 체크 로직
    - 중복 방지 및 큐 시스템
  3. Day 3: UI 구현
    - BurrowScreen 구현
    - BurrowProgressWidget 구현
    - AchievementDialog 구현
  4. Day 4: 통합 및 테스트
    - RecipeProvider 통합
    - 홈 화면 위젯 추가
    - 전체 플로우 테스트
  5. Day 5: 최종 마무리
    - 버그 수정
    - 성능 최적화
    - 문서화

  ---
  ⚠️ 주의사항

  1. 이미지 파일: 11개 모두 준비되어야 함
  2. null 안전성: 모든 rating 체크시 null 처리
  3. 중복 방지: processedRecipeIds Set 활용
  4. 성능: 언락된 조건은 스킵하여 최적화
  5. UI 충돌: 언락 큐로 순차 처리

  ---
  이 명세서를 기반으로 토끼굴 마일스톤 시스템을 구현하시면 됩니다!

