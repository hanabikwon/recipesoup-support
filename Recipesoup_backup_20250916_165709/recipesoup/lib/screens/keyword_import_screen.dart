import 'dart:async';
import 'dart:math';
import 'package:flutter/material.dart';
import '../config/theme.dart';
import '../config/api_config.dart';
import '../services/openai_service.dart';
import '../models/recipe.dart';
import '../models/mood.dart';
import '../widgets/vintage_loading_widget.dart';
import '../widgets/common/required_badge.dart';
import 'create_screen.dart';

class KeywordImportScreen extends StatefulWidget {
  const KeywordImportScreen({super.key});

  @override
  State<KeywordImportScreen> createState() => _KeywordImportScreenState();
}

class _KeywordImportScreenState extends State<KeywordImportScreen> {
  final _formKey = GlobalKey<FormState>();
  final _keywordController = TextEditingController();
  final _openAiService = OpenAiService();
  bool _isLoading = false;
  String _loadingMessage = '';
  double _loadingProgress = 0.0;
  Timer? _progressTimer;

  @override
  void dispose() {
    _keywordController.dispose();
    _progressTimer?.cancel();
    super.dispose();
  }

  void _startProgressAnimation(double targetProgress) {
    _progressTimer?.cancel();
    
    _progressTimer = Timer.periodic(const Duration(milliseconds: 100), (timer) {
      if (!mounted) {
        timer.cancel();
        return;
      }
      
      setState(() {
        // ÎûúÎç§Ìïú Ï¶ùÍ∞ÄÎüâÏúºÎ°ú ÏûêÏó∞Ïä§ÎüΩÍ≤å Ï¶ùÍ∞Ä
        final increment = Random().nextDouble() * 0.015 + 0.005; // 0.005~0.02 ÏÇ¨Ïù¥
        _loadingProgress = min(_loadingProgress + increment, targetProgress);
      });
      
      if (_loadingProgress >= targetProgress) {
        timer.cancel();
      }
    });
  }

  Future<void> _generateRecipeFromKeyword() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }
    
    final keyword = _keywordController.text.trim();

    setState(() {
      _isLoading = true;
      _loadingMessage = 'Î†àÏãúÌîº Ïû¨Î£å Ï§ÄÎπÑÏ§ë';
      _loadingProgress = 0.1;
    });
    _startProgressAnimation(0.3);

    try {
      // 1Îã®Í≥Ñ: Î†àÏãúÌîº Ïû¨Î£å Ï§ÄÎπÑÏ§ë
      await Future.delayed(Duration(milliseconds: 500));
      
      setState(() {
        _loadingMessage = 'AIÎ°ú Î†àÏãúÌîº ÏûëÏÑ±Ï§ë';
        _loadingProgress = 0.4;
      });
      _startProgressAnimation(0.7);

      // ÌÇ§ÏõåÎìú Í∏∞Î∞ò ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ± (ApiConfig ÏÇ¨Ïö©)
      final prompt = ApiConfig.createKeywordRecipePrompt(keyword);

      // 2Îã®Í≥Ñ: AIÎ°ú Î†àÏãúÌîº ÏûëÏÑ±Ï§ë
      await Future.delayed(Duration(milliseconds: 800));
      
      setState(() {
        _loadingMessage = 'Î†àÏãúÌîº ÎßàÎ¨¥Î¶¨Ï§ë';
        _loadingProgress = 0.8;
      });
      _startProgressAnimation(0.95);

      // OpenAI APIÎ•º ÌÜµÌïú Î†àÏãúÌîº ÏÉùÏÑ± (ÌîÑÎ°úÍ∑∏Î†àÏä§ ÏΩúÎ∞± Î¨¥Ïãú)
      final analysis = await _openAiService.analyzeText(
        prompt,
        onProgress: null, // ÎÇ¥Î∂Ä ÌîÑÎ°úÍ∑∏Î†àÏä§ Î©îÏãúÏßÄ Î¨¥Ïãú
      );

      // 3Îã®Í≥Ñ: Î†àÏãúÌîº ÎßàÎ¨¥Î¶¨Ï§ë 
      await Future.delayed(Duration(milliseconds: 600));
      
      setState(() {
        _loadingMessage = 'Î†àÏãúÌîº ÏûëÏÑ± ÏôÑÎ£å üê∞';
        _loadingProgress = 1.0;
      });

      await Future.delayed(Duration(milliseconds: 400));

      // Î∂ÑÏÑù Í≤∞Í≥ºÎ•º Recipe Í∞ùÏ≤¥Î°ú Î≥ÄÌôò
      final recipe = Recipe(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        title: analysis.dishName,
        emotionalStory: '', // ÏÇ¨Ïö©ÏûêÍ∞Ä ÏßÅÏ†ë ÏûëÏÑ±Ìï† Ïàò ÏûàÎèÑÎ°ù ÎπÑÏõåÎë†
        ingredients: analysis.toIngredients(), // AnalysisIngredientÎ•º IngredientÎ°ú Î≥ÄÌôò
        sauce: analysis.sauce, // AI Î∂ÑÏÑù Í≤∞Í≥ºÏóêÏÑú ÏÜåÏä§ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
        instructions: analysis.instructions,
        tags: [...analysis.tags, keyword.startsWith('#') ? keyword : '#$keyword'], // AI ÏÉùÏÑ± ÌÉúÍ∑∏ + ÌÇ§ÏõåÎìú Ìè¨Ìï®
        createdAt: DateTime.now(),
        mood: Mood.comfortable, // Í∏∞Î≥∏ Í∞êÏ†ï ÏÉÅÌÉú
        isFavorite: false,
      );

      if (!mounted) return;

      // CreateScreenÏúºÎ°ú Ïù¥Îèô (ÏÉùÏÑ± Î™®ÎìúÎ°ú)
      Navigator.of(context).pushReplacement(
        MaterialPageRoute(
          builder: (context) => CreateScreen(
            editingRecipe: recipe,
            isEditMode: false, // ÏÉàÎ°úÏö¥ Î†àÏãúÌîº ÏÉùÏÑ± Î™®Îìú
          ),
        ),
      );
    } catch (e) {
      if (!mounted) return;
      
      setState(() {
        _isLoading = false;
        _loadingMessage = '';
        _loadingProgress = 0.0;
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Î†àÏãúÌîº ÏÉùÏÑ± Ïã§Ìå®: ${e.toString()}'),
          backgroundColor: AppTheme.errorColor,
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppTheme.backgroundColor,
      appBar: AppBar(
        title: const Text('ÌÄµÎ†àÏãúÌîº ÏûëÏÑ±ÌïòÍ∏∞'),
        backgroundColor: AppTheme.backgroundColor,
        elevation: 0,
      ),
      body: _isLoading
          ? _buildLoadingView()
          : Form(
              key: _formKey,
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(AppTheme.paddingMedium),
                child: _buildInputView(),
              ),
            ),
    );
  }

  Widget _buildInputView() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // ÏÑ§Î™Ö Ïπ¥Îìú
        Container(
          padding: const EdgeInsets.all(AppTheme.paddingMedium),
          decoration: BoxDecoration(
            color: AppTheme.cardColor,
            borderRadius: BorderRadius.circular(AppTheme.borderRadiusMedium),
            boxShadow: AppTheme.vintageShadow,
          ),
          child: Row(
            children: [
              Container(
                padding: const EdgeInsets.all(AppTheme.paddingSmall),
                decoration: BoxDecoration(
                  color: AppTheme.primaryLight,
                  borderRadius: BorderRadius.circular(AppTheme.borderRadiusSmall),
                ),
                child: const Icon(
                  Icons.auto_awesome,
                  color: AppTheme.textPrimary,
                  size: 24,
                ),
              ),
              const SizedBox(width: AppTheme.spacing12),
              Expanded(
                child: Text(
                  'ÎßåÎì§Í≥† Ïã∂ÏùÄ ÏöîÎ¶¨Î™ÖÏùÑ ÏûÖÎ†•ÌïòÎ©¥ AiÍ∞Ä Î†àÏãúÌîºÎ•º ÏûêÎèôÏúºÎ°ú ÏÉùÏÑ±Ìï¥ÎìúÎ†§Ïöî.',
                  style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                    color: AppTheme.textSecondary,
                  ),
                ),
              ),
            ],
          ),
        ),
        const SizedBox(height: AppTheme.spacing24),

        // ÌÇ§ÏõåÎìú ÏûÖÎ†• ÌïÑÎìú ÎùºÎ≤®
        const LabelWithRequiredBadge(
          label: 'ÏöîÎ¶¨Î™Ö',
        ),
        const SizedBox(height: 8),

        // ÌÇ§ÏõåÎìú ÏûÖÎ†• ÌïÑÎìú
        TextFormField(
          controller: _keywordController,
          autofocus: true,
          decoration: const InputDecoration(
            hintText: 'Ïòà: ÌÅ¥Îû® Ï∞®Ïö∞Îçî',
            border: OutlineInputBorder(),
            prefixIcon: Icon(Icons.flash_on, color: AppTheme.primaryColor),
          ),
          validator: (value) {
            if (value == null || value.trim().isEmpty) {
              return 'ÌÇ§ÏõåÎìúÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî';
            }
            return null;
          },
          onFieldSubmitted: (_) => _generateRecipeFromKeyword(),
        ),
        const SizedBox(height: AppTheme.spacing32),

        // ÏÉùÏÑ± Î≤ÑÌäº
        SizedBox(
          width: double.infinity,
          child: ElevatedButton.icon(
            onPressed: _generateRecipeFromKeyword,
            icon: const Icon(Icons.flash_on, size: 20),
            label: const Text('ÌÄµÎ†àÏãúÌîº ÏÉùÏÑ±ÌïòÍ∏∞'),
            style: ElevatedButton.styleFrom(
              backgroundColor: AppTheme.primaryColor,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.symmetric(vertical: 12),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(AppTheme.borderRadiusMedium),
              ),
            ),
          ),
        ),

      ],
    );
  }

  Widget _buildLoadingView() {
    return ProgressVintageLoading(
      message: _loadingMessage,
      progress: _loadingProgress,
    );
  }
}